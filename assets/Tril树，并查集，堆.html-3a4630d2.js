const e=JSON.parse('{"key":"v-2ce0a814","path":"/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Tril%E6%A0%91%EF%BC%8C%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%8C%E5%A0%86.html","title":"Trie树，并查集，堆","lang":"zh-CN","frontmatter":{"title":"Trie树，并查集，堆","desctiption":"数据结构","date":"2023-05-04T00:00:00.000Z","icon":"bit","category":["数据结构","算法"],"tag":["数据结构","算法"],"description":"Trie树 高效快速存储查找字符串集合的数据结构 ，一般存储全是大写或者全是小写的简单字符串（多叉树） 数组建树 trie树那里，[N][26]的第一维度不是树的层数；第一维是结点总数，而结点和结点之间的关系（谁是谁儿子）存在第二个维度，比如[0][1]=3, [0]表示根节点，[1]表示它有一个儿子‘b’,这个儿子的下标是3；接着如果有一个[3][2]=8 ; 说明根节点的儿子‘b’也有一个儿子‘c’，这个孙子的下标就是8；这样传递下去，就是一个字符串。随便给一个结点[x][y], 并不能看出它在第几层，只能知道，它的儿子是谁。","head":[["meta",{"property":"og:url","content":"https://zhangyufeng19988.github.io/zyf/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Tril%E6%A0%91%EF%BC%8C%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%8C%E5%A0%86.html"}],["meta",{"property":"og:title","content":"Trie树，并查集，堆"}],["meta",{"property":"og:description","content":"Trie树 高效快速存储查找字符串集合的数据结构 ，一般存储全是大写或者全是小写的简单字符串（多叉树） 数组建树 trie树那里，[N][26]的第一维度不是树的层数；第一维是结点总数，而结点和结点之间的关系（谁是谁儿子）存在第二个维度，比如[0][1]=3, [0]表示根节点，[1]表示它有一个儿子‘b’,这个儿子的下标是3；接着如果有一个[3][2]=8 ; 说明根节点的儿子‘b’也有一个儿子‘c’，这个孙子的下标就是8；这样传递下去，就是一个字符串。随便给一个结点[x][y], 并不能看出它在第几层，只能知道，它的儿子是谁。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-22T03:59:03.000Z"}],["meta",{"property":"article:author","content":"ZYF"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2023-05-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-22T03:59:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Trie树，并查集，堆\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-04T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-22T03:59:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ZYF\\",\\"url\\":\\"https://zhangyufeng19989.github.io\\",\\"email\\":\\"907392790@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"Trie树","slug":"trie树","link":"#trie树","children":[]},{"level":2,"title":"并查集","slug":"并查集","link":"#并查集","children":[{"level":3,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]},{"level":3,"title":"基本思想","slug":"基本思想","link":"#基本思想","children":[]},{"level":3,"title":"代码示例","slug":"代码示例","link":"#代码示例","children":[]}]},{"level":2,"title":"堆","slug":"堆","link":"#堆","children":[{"level":3,"title":"如何手写一个堆？","slug":"如何手写一个堆","link":"#如何手写一个堆","children":[]},{"level":3,"title":"基本结构","slug":"基本结构","link":"#基本结构","children":[]},{"level":3,"title":"代码示例","slug":"代码示例-1","link":"#代码示例-1","children":[]}]}],"git":{"createdTime":1684727943000,"updatedTime":1684727943000,"contributors":[{"name":"zyf","email":"907392790@qq.com","commits":1}]},"readingTime":{"minutes":10.93,"words":3280},"filePathRelative":"posts/算法基础/数据结构/Tril树，并查集，堆.md","localizedDate":"2023年5月4日","excerpt":"\\n<h2> Trie树</h2>\\n<p>高效快速存储查找字符串集合的数据结构 ，一般存储全是大写或者全是小写的简单字符串（多叉树）</p>\\n\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">数组建树</p>\\n<p>trie树那里，[N][26]的第一维度不是树的层数；第一维是结点总数，而结点和结点之间的关系（谁是谁儿子）存在第二个维度，比如[0][1]=3, [0]表示根节点，[1]表示它有一个儿子‘b’,这个儿子的下标是3；接着如果有一个[3][2]=8 ; 说明根节点的儿子‘b’也有一个儿子‘c’，这个孙子的下标就是8；这样传递下去，就是一个字符串。随便给一个结点[x][y], 并不能看出它在第几层，只能知道，它的儿子是谁。</p>\\n</div>","autoDesc":true}');export{e as data};
