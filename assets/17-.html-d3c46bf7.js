import{_ as n,X as s,Y as a,a2 as t}from"./framework-a8949fcd.js";const e={},p=t(`<h2 id="_17-1-面向对象语言的特性" tabindex="-1"><a class="header-anchor" href="#_17-1-面向对象语言的特性" aria-hidden="true">#</a> 17.1 面向对象语言的特性</h2><h3 id="rust是面向对象的语言么" tabindex="-1"><a class="header-anchor" href="#rust是面向对象的语言么" aria-hidden="true">#</a> Rust是面向对象的语言么？</h3><ul><li>Rust受到多种编程范式的影响，包括面向对象</li><li>面向对象通常包括以下特性：命名对象、封装、继承</li></ul><h3 id="对象包含数据和行为" tabindex="-1"><a class="header-anchor" href="#对象包含数据和行为" aria-hidden="true">#</a> 对象包含数据和行为</h3><ul><li>struct、enum包含数据</li><li>impl块为之提供了方法</li><li>但带有方法的struct、enum并没有被称为对象</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">AveragedCollection</span> <span class="token punctuation">{</span>
    list<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    average<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span>
    <span class="token comment">// 结构体是共有的，里面的字段是私有的，访问和修改里面的数据使用下面的pub方法</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">AveragedCollection</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">AveragedCollection</span> <span class="token punctuation">{</span>
        <span class="token class-name">AveragedCollection</span> <span class="token punctuation">{</span>
            list<span class="token punctuation">:</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            average<span class="token punctuation">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">update_average</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">remove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">match</span> result <span class="token punctuation">{</span>
            <span class="token class-name">Some</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">update_average</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Some</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token class-name">None</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">average</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">f64</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>average
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">update_average</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> total<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>average <span class="token operator">=</span> total <span class="token keyword">as</span> <span class="token keyword">f64</span> <span class="token operator">/</span> <span class="token keyword">self</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">f64</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// mian.rs</span>
<span class="token keyword">use</span> <span class="token namespace">rust_project<span class="token punctuation">::</span></span><span class="token class-name">AveragedCollection</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> a <span class="token operator">=</span> <span class="token class-name">AveragedCollection</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">AveragedCollection</span><span class="token punctuation">::</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> a<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">AveragedCollection</span><span class="token punctuation">::</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> a<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">AveragedCollection</span><span class="token punctuation">::</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> a<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span><span class="token class-name">AveragedCollection</span><span class="token punctuation">::</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h3><ul><li>继承：使对象可以沿用另外一个对象的数据和行为，且无需重复定义相关代码</li><li>Rust：没有继承</li><li>使用继承的原因： <ul><li>代码复用 <ul><li>Rust：默认trait方法来进行代码共享（如果trait方法有默认实现，就是默认方法，任何实现了这个trait的类型就自动拥有这个方法）</li></ul></li><li>多态：希望自类型可以应用在一个需要父类型的地方 <ul><li>Rust：使用泛型和trait约束（限定参数化多态bounded parametric）</li></ul></li></ul></li><li>很多新语言都不使用继承作为内置的程序设计方案了</li></ul><h2 id="_17-2-使用trait对象来存储不同类型的值" tabindex="-1"><a class="header-anchor" href="#_17-2-使用trait对象来存储不同类型的值" aria-hidden="true">#</a> 17.2 使用trait对象来存储不同类型的值</h2><h3 id="对共有行为定义一个trait" tabindex="-1"><a class="header-anchor" href="#对共有行为定义一个trait" aria-hidden="true">#</a> 对共有行为定义一个trait</h3><ul><li>Rust避免将struct或enum称为对象，因为它们与impl块是分开的</li><li>trait对象有些类似于其它语言中的对象 <ul><li>它们某种程度上组合了数据与行为</li></ul></li><li>trait对象与传统对象不同的地方： <ul><li>无法为trait对象添加数据</li></ul></li><li>trait对象被专门用于抽象某些共有行为，它没有其他语言对象中的对象那么通用</li></ul><h3 id="trait对象执行的是动态派发" tabindex="-1"><a class="header-anchor" href="#trait对象执行的是动态派发" aria-hidden="true">#</a> Trait对象执行的是动态派发</h3><ul><li>将trait约束作用于泛型时，Rust编译器会执行单态化 <ul><li>编译器会为我们用来替换泛型类型参数的每一个具体类型生成对应函数和方法的非泛型实现。</li></ul></li><li>通过单态化生成的代码会执行静态派发（static dispatch），在编译过程中确定调用的具体方法</li><li>动态派发（dynamic dispatch） <ul><li>无法在编译过程中确定你调用的究竟是哪一种方法</li><li>编译器会产生额外的代码以便在运行时找出希望调用的方法</li></ul></li><li>使用trait对象，会执行动态派发 <ul><li>产生运行时开销</li><li>组织编译器内联方法代码，使得部分优化操作无法进行</li></ul></li></ul><h3 id="trait对象必须保证对象安全" tabindex="-1"><a class="header-anchor" href="#trait对象必须保证对象安全" aria-hidden="true">#</a> Trait对象必须保证对象安全</h3><ul><li>只能把满足对象安全（object-safe）的trait转化为trait对象</li><li>Rust采用一系列规则判定某个对象是否安全，只需要记住两条 <ul><li>方法的返回类型不是Self</li><li>方法中不包含任何泛型类型参数</li></ul></li></ul><h2 id="_17-3-实现面向对象的设计模式" tabindex="-1"><a class="header-anchor" href="#_17-3-实现面向对象的设计模式" aria-hidden="true">#</a> 17.3 实现面向对象的设计模式</h2><h3 id="状态模式" tabindex="-1"><a class="header-anchor" href="#状态模式" aria-hidden="true">#</a> 状态模式</h3><ul><li>状态模式（state pattern）是一种面向对象设计模式： <ul><li>一个值拥有内部状态由数个状态对象（state object）表达而成，而值的行为则随着内部状态的改变而改变</li></ul></li><li>使用状态模式意味着： <ul><li>业务需求变化时，不需要修改持有状态的值的代码，或者使用这个值的代码</li><li>只需要更新状态对象内部的代码，以便改变其规则。或者增加一些新的状态对象</li></ul></li></ul><h3 id="状态模式的取舍权衡" tabindex="-1"><a class="header-anchor" href="#状态模式的取舍权衡" aria-hidden="true">#</a> 状态模式的取舍权衡</h3><ul><li>缺点：某且状态之间相互耦合需要重复实现逻辑代码</li></ul><h3 id="将状态和行为编码为类型" tabindex="-1"><a class="header-anchor" href="#将状态和行为编码为类型" aria-hidden="true">#</a> 将状态和行为编码为类型</h3><ul><li>将状态编码为不同的类型： <ul><li>Rust类型检查系统会通过编译时错误来组织用户使用无效状态</li></ul></li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><ul><li>Rust不仅能够实现面向对象的设计模式，还可以支持更多的模式</li><li>例如：将状态和行为编码为类型</li><li>面向对象的经典模式并不总是Rust编程时间中的最佳选择，因为Rust具有所有权等其他面向对象语言没有的特性</li></ul>`,25),l=[p];function o(i,c){return s(),a("div",null,l)}const r=n(e,[["render",o],["__file","17-.html.vue"]]);export{r as default};
