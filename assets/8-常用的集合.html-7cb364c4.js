import{_ as n,X as s,Y as a,a2 as t}from"./framework-a8949fcd.js";const p={},e=t(`<p>存储在堆内存上，数据大小无需在编译的时候确定，可以动态的变大或者变小</p><h2 id="_8-1-vector" tabindex="-1"><a class="header-anchor" href="#_8-1-vector" aria-hidden="true">#</a> 8.1 Vector</h2><ul><li><code>Vec&lt;T&gt;</code>,叫做vector <ul><li>由标准库提供</li><li>可存储多个值</li><li>只能存储相同类型的数据</li><li>值在内存中连续存放</li></ul></li></ul><h3 id="创建vector" tabindex="-1"><a class="header-anchor" href="#创建vector" aria-hidden="true">#</a> 创建Vector</h3><ul><li><code>Vec::new</code> 函数 <ul><li><code>let v: Vec&lt;i32&gt; = Vec::new();</code></li></ul></li><li>使用初始值创建<code>Vec&lt;T&gt;</code>（比较常用）,使用<code>vec!</code>宏 <ul><li><code>let v = vec![1,2,3];</code></li></ul></li></ul><h3 id="添加元素" tabindex="-1"><a class="header-anchor" href="#添加元素" aria-hidden="true">#</a> 添加元素</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除vector" tabindex="-1"><a class="header-anchor" href="#删除vector" aria-hidden="true">#</a> 删除Vector</h3><ul><li>与任何其他struct一样，当Vector离开作用域后 <ul><li>它就会被清理</li><li>它所有的元素也会被清理</li></ul></li></ul><h3 id="读取vector的元素" tabindex="-1"><a class="header-anchor" href="#读取vector的元素" aria-hidden="true">#</a> 读取Vector的元素</h3><ul><li><strong>两种方式</strong>可以引用Vector里的值 <ul><li>索引</li><li>get方法</li></ul></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 用索引访问</span>
    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 用get访问</span>
    <span class="token keyword">match</span> v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Some</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;None&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="索引-对比-get-处理访问越界" tabindex="-1"><a class="header-anchor" href="#索引-对比-get-处理访问越界" aria-hidden="true">#</a> 索引 对比 get 处理访问越界</h3><ul><li>索引：panic</li><li>get：返回None</li></ul><h3 id="所有权和借用规则" tabindex="-1"><a class="header-anchor" href="#所有权和借用规则" aria-hidden="true">#</a> 所有权和借用规则</h3><ul><li>不能在同一作用域内同时拥有可变和不可变引用</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> first <span class="token operator">=</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container danger"><p class="hint-container-title">报错</p><p>以上代码会报错</p></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Vector在内存中的存放是连续的，在添加一个元素后，可能会对内存进行重新分配，原来的内存可能会重新释放</p><p><code>let first = &amp;v[0]</code>还会指向原来的内存地址</p><p>可能会导致bug</p></div><h3 id="遍历vector中的值" tabindex="-1"><a class="header-anchor" href="#遍历vector中的值" aria-hidden="true">#</a> 遍历Vector中的值</h3><ul><li>for循环</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token operator">&amp;</span>v<span class="token punctuation">{</span><span class="token comment">//不可变引用</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>上方代码若直接使用<code>for i in v</code>则遍历完之后变量v则会失效</p></div><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> v<span class="token punctuation">{</span><span class="token comment">//可变引用</span>
        <span class="token operator">*</span>i <span class="token operator">+=</span> <span class="token number">50</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token keyword">mut</span> i <span class="token keyword">in</span> v<span class="token punctuation">{</span><span class="token comment">//可变引用</span>
        i <span class="token operator">+=</span> <span class="token number">50</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-2-vector例子" tabindex="-1"><a class="header-anchor" href="#_8-2-vector例子" aria-hidden="true">#</a> 8.2 Vector例子</h2><h3 id="使用枚举来存储多种数据类型" tabindex="-1"><a class="header-anchor" href="#使用枚举来存储多种数据类型" aria-hidden="true">#</a> 使用枚举来存储多种数据类型</h3><ul><li>Enum的变体可以附加不同类型的数据</li><li>Enum的变体定义在同一个enum类型下</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">enum</span> <span class="token type-definition class-name">SpreadsheetCell</span><span class="token punctuation">{</span>
    <span class="token class-name">Int</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Float</span><span class="token punctuation">(</span><span class="token keyword">f64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> row <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>
        <span class="token class-name">SpreadsheetCell</span><span class="token punctuation">::</span><span class="token class-name">Int</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">SpreadsheetCell</span><span class="token punctuation">::</span><span class="token class-name">Float</span><span class="token punctuation">(</span><span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">SpreadsheetCell</span><span class="token punctuation">::</span><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;blue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-3-string-上" tabindex="-1"><a class="header-anchor" href="#_8-3-string-上" aria-hidden="true">#</a> 8.3 String （上）</h2><h3 id="rust开发正经常会被字符串困扰" tabindex="-1"><a class="header-anchor" href="#rust开发正经常会被字符串困扰" aria-hidden="true">#</a> Rust开发正经常会被字符串困扰</h3><ul><li>Rust倾向于暴露可能的错误</li></ul><h3 id="字符串是什么" tabindex="-1"><a class="header-anchor" href="#字符串是什么" aria-hidden="true">#</a> 字符串是什么</h3><ul><li><p>Byte的集合</p></li><li><p>一些方法</p><ul><li>能将byte解析为文本</li></ul></li><li><p>Rust的<mark>核心语言层面</mark>，只有一个字符串类型：字符串切片str（或&amp;str）</p></li><li><p>字符串切片：对存储在其他地方、UTF-8编码的字符串的引用</p><ul><li>字符串字面值：存储在二进制文件中，也是字符串切片</li></ul></li><li><p><mark>String类型</mark></p><ul><li>来自<mark>标准库</mark>而不是核心语言</li><li>可增长、可修改、可拥有</li><li>UTF-8编码</li></ul></li></ul><h3 id="通常说的字符串是指" tabindex="-1"><a class="header-anchor" href="#通常说的字符串是指" aria-hidden="true">#</a> 通常说的字符串是指</h3><ul><li>String和&amp;str</li></ul><h3 id="其它字符串类型" tabindex="-1"><a class="header-anchor" href="#其它字符串类型" aria-hidden="true">#</a> 其它字符串类型</h3><ul><li><code>OsString</code>,<code>OsStr</code>,<code>CString</code>,<code>CStr</code><ul><li>String对比Str后缀：拥有或借用的变体</li><li>可存储不同编码的文本或内存中以不同的形式展现</li></ul></li><li>Library crate（第三方库）针对春促字符串可提供更多的选项</li></ul><h3 id="创建一个新的字符串-string" tabindex="-1"><a class="header-anchor" href="#创建一个新的字符串-string" aria-hidden="true">#</a> 创建一个新的字符串（String）</h3><ul><li>很多<code>Vec&lt;T&gt;</code>的操作都可用于String</li><li><code>String::new()</code>函数 <ul><li>to_string()方法，可用于实现的Display trait的类型，包括字符串字面值</li><li>例子</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">&quot;initial contents&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> s <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string">&quot;initial contents&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong>s和s1这两种初始化方式等价</strong></p></div><ul><li><code>let s = String::from(&quot;initial contents&quot;);</code></li></ul></li></ul><h3 id="更新string" tabindex="-1"><a class="header-anchor" href="#更新string" aria-hidden="true">#</a> 更新String</h3><ul><li><p><code>push_str()</code>方法：把一个字符串切片附加到String，<strong>不会获得参数的所有权</strong></p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>  <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      s<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// println!(&quot;{s}&quot;);效果一样</span>
      <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>    <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      s<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// println!(&quot;{s}&quot;);效果一样</span>
      <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>push()</code>方法：把单个字符附加到String</p></li><li><p><code>+</code>连接字符串</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> s3 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{s3}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>使用<code>+</code>连接字符串使用了<strong>类似</strong>这个签名的方法</p><p><code>fn add(self,s:&amp;str) -&gt; String {...}</code></p><p>标准库中add方法使用了泛型</p><p>只能把&amp;str添加到String</p><p>解引用强制换（deref coercion）</p></div></li><li><p>使用<code>format!</code>连接多个字符串，不会取得任何参数的所有权</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> s3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;China&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//let s4 = s1 + &quot;-&quot; + &amp;s2 + &quot;-&quot; + &amp;s3;</span>
    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;{s1}-{s2}-{s3}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{s}&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_8-4-string-下" tabindex="-1"><a class="header-anchor" href="#_8-4-string-下" aria-hidden="true">#</a> 8.4 String(下)</h2><h3 id="对string按索引的形式进行访问" tabindex="-1"><a class="header-anchor" href="#对string按索引的形式进行访问" aria-hidden="true">#</a> 对String按索引的形式进行访问</h3><ul><li>按索引语法访问String的某部分，会报错</li></ul><h3 id="内部表示" tabindex="-1"><a class="header-anchor" href="#内部表示" aria-hidden="true">#</a> 内部表示</h3><ul><li>String是对<code>Vec&lt;u8&gt;</code>的包装 <ul><li><code>len()</code>方法</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>  <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//Unicode 标量值</span>

      <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{s1}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="字节、标量值、字形簇" tabindex="-1"><a class="header-anchor" href="#字节、标量值、字形簇" aria-hidden="true">#</a> 字节、标量值、字形簇</h3><p><strong>Bytes，Scalar Values，Grapheme Clusters</strong></p><ul><li>Rust有三种看待字符串的方式： <ul><li>字节</li><li>标量值</li><li>字形簇（最接近语言字母）</li></ul></li><li>Rust不允许对String进行索引的原因 <ul><li>索引操作应该消耗一个常量时间（O（1））</li><li>而String无法保证：需要遍历所有内容，来确定有多少个合法字符</li></ul></li></ul><h3 id="切割string" tabindex="-1"><a class="header-anchor" href="#切割string" aria-hidden="true">#</a> 切割String</h3><ul><li>可以用[ ]和一个范围来创建字符串的切片 <ul><li>必须谨慎使用</li><li>如果切割时跨越了字符边界，程序就会panic！</li></ul></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;张羽丰&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{s1}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 输出结果为 张</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="遍历string的方法" tabindex="-1"><a class="header-anchor" href="#遍历string的方法" aria-hidden="true">#</a> 遍历String的方法</h3><ul><li>对于标量值<code>chars()</code>方法</li><li>对于字节<code>bytes()</code>方法</li><li>对于字形簇，标准库未提供</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><ul><li>Rust选择将正确处理String数据作为所有Rust程序的默认行为 <ul><li>程序员必须在处理UTF-8数据之前投入更多的精力</li></ul></li><li>可防止在开发后期处理涉及非ASCII字符的错误</li></ul><h2 id="_8-5-hashmap-上" tabindex="-1"><a class="header-anchor" href="#_8-5-hashmap-上" aria-hidden="true">#</a> 8.5 HashMap（上）</h2><h3 id="hashmap-k-v" tabindex="-1"><a class="header-anchor" href="#hashmap-k-v" aria-hidden="true">#</a> <code>HashMap&lt;K,V&gt;</code></h3><ul><li>键值对的形式存储数据，一个键（Key）对应一个值（Value）</li><li>Hash函数：决定如何在内存中存放K和V</li></ul><h3 id="创建hashmap" tabindex="-1"><a class="header-anchor" href="#创建hashmap" aria-hidden="true">#</a> 创建HashMap</h3><ul><li>创建空HashMap <code>new()</code>函数</li><li>添加数据 <code>insert()</code>方法</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> scores<span class="token punctuation">:</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token keyword">i32</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    scores<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Blue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>HashMap 不在prelude中</li><li>标准库对其支持比较少，没有内置的宏来创建HashMap</li><li>数据存储在heap上</li><li>HashMap是同构的 <ul><li>所有的K必须是同一类型</li><li>所有的V必须是同一类型</li></ul></li></ul><h3 id="使用collet方法创建hashmap" tabindex="-1"><a class="header-anchor" href="#使用collet方法创建hashmap" aria-hidden="true">#</a> 使用collet方法创建HashMap</h3><p>只能在特定情况下使用</p><ul><li>在元素类型为Tuple的Vector上使用collect方法，可以组建一个HashMap <ul><li>要求Tuple有两个值：一个作为K、一个作为V</li><li>collect可以把数据组合成很多种集合类型，包括HashMap <ul><li>返回值需要显示指明类型</li></ul></li></ul></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> teams<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Blue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> initial_scores<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> scores<span class="token punctuation">:</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token operator">&gt;</span> <span class="token operator">=</span>
        teams<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span>initial_scores<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hashmap-和所有权" tabindex="-1"><a class="header-anchor" href="#hashmap-和所有权" aria-hidden="true">#</a> HashMap 和所有权</h3><ul><li>对于实现了Copy trait的类型（例如i32），值会被复制到HashMap中</li><li>队友拥有所有权的值（例如String），值会被移动，所有权会转移给HashMap</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> field_name <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;zyf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> field_value <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;stc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> map <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>field_name<span class="token punctuation">,</span>field_value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;zyf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// field_name field_value失效了</span>
    <span class="token comment">//println!(&quot;{}:{}&quot;,field_name,field_value);</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果将值的引用插入到HashMap中，值本身不会移动 <ul><li><code>map.insert(&amp;field_name,&amp;field_value);</code></li><li>在HashMap有效的期间，被引用的值必须要保持有效</li></ul></li></ul><h3 id="访问hashmap中的值" tabindex="-1"><a class="header-anchor" href="#访问hashmap中的值" aria-hidden="true">#</a> 访问HashMap中的值</h3><ul><li>get方法 <ul><li>参数：K</li><li>返回 <code>Option&lt;&amp;V&gt;</code></li></ul></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> scores <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    scores<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;zyf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;stc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    scores<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;zyf1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;stc!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> score <span class="token operator">=</span> scores<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;zyf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">match</span> score <span class="token punctuation">{</span>
        <span class="token class-name">Some</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;team not exist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="遍历hashmap" tabindex="-1"><a class="header-anchor" href="#遍历hashmap" aria-hidden="true">#</a> 遍历HashMap</h3><ul><li>for 循环</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token operator">&amp;</span>scores<span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}:{}&quot;</span><span class="token punctuation">,</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hashmap-下" tabindex="-1"><a class="header-anchor" href="#hashmap-下" aria-hidden="true">#</a> HashMap(下)</h2><h3 id="更新hashmap" tabindex="-1"><a class="header-anchor" href="#更新hashmap" aria-hidden="true">#</a> 更新HashMap</h3><ul><li>HashMap大小可变</li><li>每个K同时只能对应一个V</li><li>更新HashMap中的数据 <ul><li>K已经存在，对应一个V <ul><li>替换现有V</li><li>保留现在的V，忽略新的V</li><li>合并现有的V和新的V</li></ul></li><li>K不存在 <ul><li>添加新的</li></ul></li></ul></li></ul><h3 id="替换现有的v" tabindex="-1"><a class="header-anchor" href="#替换现有的v" aria-hidden="true">#</a> 替换现有的V</h3><ul><li>如果向HashMap插入一对KV，然后再插入同样的K，但是不同的V，那么原来的V会被替换掉</li></ul><h3 id="只在k不对应任何值的情况下-才插入v" tabindex="-1"><a class="header-anchor" href="#只在k不对应任何值的情况下-才插入v" aria-hidden="true">#</a> 只在K不对应任何值的情况下，才插入V</h3><ul><li>entry 方法：检查指定的K是否对应一个V <ul><li>参数为K</li><li>返回enum Entry：代表值是否存在</li></ul></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> scores <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    scores<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Blue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// scores.entry(String::from(&quot;Yellow&quot;)).or_insert(50);</span>
    <span class="token keyword">let</span> e <span class="token operator">=</span> scores<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Yellow&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> e <span class="token punctuation">)</span><span class="token punctuation">;</span>
    e<span class="token punctuation">.</span><span class="token function">or_insert</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    scores<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Blue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or_insert</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span>scores<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Entry的or_insert()方法 <ul><li>返回： <ul><li>如果K存在，返回到对应的V的一个可变的引用</li><li>如果K不存在，将方法参数作为K的新值插进去，返回到这个值的可变引用</li></ul></li></ul></li></ul><h3 id="基于现有v更新v" tabindex="-1"><a class="header-anchor" href="#基于现有v更新v" aria-hidden="true">#</a> 基于现有V更新V</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token string">&quot;hello world zyf zyf zyf world&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> map <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> word <span class="token keyword">in</span> text<span class="token punctuation">.</span><span class="token function">split_whitespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// entry(word)如果存在的话，就返回对应V可变引用</span>
        <span class="token keyword">let</span> count <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or_insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">*</span>count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:#?}&quot;</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hash函数" tabindex="-1"><a class="header-anchor" href="#hash函数" aria-hidden="true">#</a> Hash函数</h3><ul><li>默认情况下，HashMap使用加密功能强大的Hash函数，可以抵抗拒绝服务（DoS）攻击 <ul><li>不是可用的最快的Hash算法</li><li>但具有更好的安全性</li></ul></li><li>可以指定不同的hasher来切换到另一个函数 <ul><li>hasher是实现BuildHasher trait的类型</li></ul></li></ul>`,91),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","8-常用的集合.html.vue"]]);export{r as default};
