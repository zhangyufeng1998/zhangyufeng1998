import{_ as e,X as p,Y as o,Z as n,$ as a,a1 as c,a2 as s,E as l}from"./framework-a8949fcd.js";const i={},u=s(`<h2 id="_2-1-ioc容器基础知识" tabindex="-1"><a class="header-anchor" href="#_2-1-ioc容器基础知识" aria-hidden="true">#</a> 2.1 IoC容器基础知识</h2><h3 id="什么是ioc容器" tabindex="-1"><a class="header-anchor" href="#什么是ioc容器" aria-hidden="true">#</a> 什么是IoC容器</h3><p>控制反转（Inversion of Control，IoC）</p><p><mark>控制反转</mark>是一种决定容器如何装配组件的模式，<mark>容器</mark>就是创建组件并对他们进行管理的地方，它牵扯到组件该如何定义、组件该何时创建、又该何时销毁、它们互相之间是什么关系等。这些本应该在组件内部管理的东西，被从组件中剥离出来。</p><p>所有组件都要被动接受容器的控制</p><p><mark>依赖注入</mark>（Dependency Injection）可以更好的对控制反转进行描述</p><p>Spring容器就是Spring Framework中的IoC容器</p><p>将业务对象（也就是组件，在Spring中这些组件被称为Bean）和关于组件的配置元数据（比如依赖关系）输入Spring容器中，容器就可以组装一个可用的系统。</p><h3 id="容器的初始化" tabindex="-1"><a class="header-anchor" href="#容器的初始化" aria-hidden="true">#</a> 容器的初始化</h3><p>Spring容器的配置需要<strong>元数据</strong>和<strong>业务对象</strong></p><p>配置元数据的方式：</p><ul><li>从XML配置文件配置（早期）</li><li>通过注解</li><li>通过java类</li></ul><p>容器初始化的大致步骤：</p><ol><li>从XML文件、Java类或其他地方配置元数据。</li><li>通过BeanFactoryPostProcessor对配置元数据进行一轮处理。</li><li>初始化Bean实例，并根据给定的依赖关系组装对象。</li><li>通过BeanPostProcessor对Bean进行处理，期间还会触发Bean被构造后的回调方法。</li></ol><p>比如下列代码所示的<strong>业务对象</strong>，它会返回一个字符串，可以看到他就是一个最普通的java类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zyf</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在没有IoC容器时，就需要像下列代码一样 管理自己的生命周期</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Hello</span> hello <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果把实例交给Spring交给容器托管，可以将它配置到XML文件中（main/resources/beans.xml）</p>`,19),r={class:"hint-container danger"},d=n("p",{class:"hint-container-title"},"错误",-1),k=n("p",null,"编写XML配置文件时出现了错误：",-1),m=n("p",null,"URI is not registered (Settings | Languages & Frameworks | Schemas and DTDs)",-1),v={href:"https://blog.csdn.net/weixin_43367967/article/details/85198352",target:"_blank",rel:"noopener noreferrer"},b=s(`<div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 1.创建对象，就是在xml中写一个bean标签，就是一个对象 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hello<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.zyf.Hello<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如下面代码所示，将配置文件载入容器 <code>BeanFactory</code>只是一个最基础的接口，我们需要选择一个合适的实现类<strong>在实际工作中会用到<code>ApplicationContext</code>的各种实现</strong></p><p>此处使用<code>DefaultListableBeanFactory</code>这个实现类他不关心配置的方式，<code>XmlBeanDefinitionReader</code>可以读取XML文件中的元数据，通过它加载CLASSPATH中的beans.xml文件（这个xml配置文件名称可以自己起）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zyf</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">BeanFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">DefaultListableBeanFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>xml<span class="token punctuation">.</span></span><span class="token class-name">XmlBeanDefinitionReader</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">BeanFactory</span> beanFactory<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">XmlBeanDefinitionReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlBeanDefinitionReader</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

        reader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token string">&quot;beans.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Hello hello = (Hello)beanFactory.getBean(&quot;hello&quot;);</span>
        <span class="token class-name">Hello</span> hello <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Hello</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zyf</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Application</span> application <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        application<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="beanfactory与applicationcontext" tabindex="-1"><a class="header-anchor" href="#beanfactory与applicationcontext" aria-hidden="true">#</a> BeanFactory与ApplicationContext</h3><p>spring-context模块在spring-core和spring-beans的基础上提供了更丰富的功能，例如事件传播、资源加载、国际化支持等。</p><p>BeanFactory是容器的基础接口，ApplicationContext接口继承了BeanFactory</p><p>将上面代码使用的BeanFactory修改为ApplicationContext</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zyf</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;beans.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Hello</span> hello <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Hello</span><span class="token punctuation">)</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//Hello hello = applicationContext.getBean(&quot;hello&quot;, Hello.class);</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常见的ApplicationContext实现类</p><table><thead><tr><th>类名</th><th>说明</th></tr></thead><tbody><tr><td>ClassPathXmlApplication</td><td>从CLASSPATH中加载XML文件来配置ApplicationContext</td></tr><tr><td>FileSystemXmlApplication</td><td>从文件系统中加载XML文件来配置ApplicationContext</td></tr><tr><td>AnnotationConfigApplication</td><td>根据注解和Java类来配置ApplicationContext</td></tr></tbody></table><h3 id="容器的继承关系" tabindex="-1"><a class="header-anchor" href="#容器的继承关系" aria-hidden="true">#</a> 容器的继承关系</h3><p>子容器可以继承父容器中的配置组件</p><h2 id="_2-2-bean基础知识" tabindex="-1"><a class="header-anchor" href="#_2-2-bean基础知识" aria-hidden="true">#</a> 2.2 Bean基础知识</h2><h3 id="什么是bean" tabindex="-1"><a class="header-anchor" href="#什么是bean" aria-hidden="true">#</a> 什么是Bean</h3><p>Bean是Java中<strong>可重用软件组件</strong>，Spring容器也遵循这一惯例，因此将容器中管理的可重用组件称为Bean。</p><p>容器会根据提供的元数据来创建并管理这些Bean，其中也包括它们之间的依赖关系。 Spring容器对Bean并没有太多要求，无需实现特定接口或依赖特定库，只要是最普通的Java对象即可，这类对象也被称为<strong>POJO（Plain Old Java Object）</strong></p><p>一个Bean的定义中，会包含如下部分：</p><ul><li>Bean的名称，一般是Bean的id，也可以为Bean指定别名（alias）</li><li>Bean的具体类信息，这是一个全限定类名</li><li>Bean的作用域，单例（singleton）还是原型（prototype）</li><li>依赖注入相关信息，构造方法参数，属性以及自动织入（autowire）方式</li><li>创建销毁相关信息，懒加载模式、初始化回调方法与销毁回调方法</li></ul><p>我们可以自行设置Bean的名称，也可以让Spring容器帮我们设置名称。Spring容器的命名方式为类名的首字母小写，搭配驼峰（camel-cased）规则。比如类型为HelloService的bean，自动生成的名称就为helloService</p><h3 id="bean的依赖关系" tabindex="-1"><a class="header-anchor" href="#bean的依赖关系" aria-hidden="true">#</a> Bean的依赖关系</h3><h3 id="bean的三种配置方式" tabindex="-1"><a class="header-anchor" href="#bean的三种配置方式" aria-hidden="true">#</a> Bean的三种配置方式</h3><p>Spring容器的元数据<strong>本质上就是配置Bean</strong></p><h4 id="_1-基于xml文件配置" tabindex="-1"><a class="header-anchor" href="#_1-基于xml文件配置" aria-hidden="true">#</a> 1.基于XML文件配置</h4><h4 id="_2-基于注解的配置" tabindex="-1"><a class="header-anchor" href="#_2-基于注解的配置" aria-hidden="true">#</a> 2.基于注解的配置</h4><p>在beans.xml加入以下代码</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.zyf<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述配置会扫描com.zyf包内的类，在类上添加以下四个注解都能让Spring容器把他们配置为Bean</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Component</td><td>将类标识为普通组件，即一个Bean</td></tr><tr><td>@Service</td><td>将类标识为服务层的服务</td></tr><tr><td>@Reposity</td><td>姜磊表示为数据层的数据仓库，一般是DAO（data Access Object）</td></tr><tr><td>@Controller</td><td>将类标识为Web层的Web控制器（后来针对REST服务又增加了@RestController）</td></tr></tbody></table><p>如果不指定名称Spring会自动生成一个名称，也可以指定</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">&quot;helloBean&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-基于java类的配置" tabindex="-1"><a class="header-anchor" href="#_3-基于java类的配置" aria-hidden="true">#</a> 3.基于Java类的配置</h4><p>可以用Java类代替XML文件，使用@Configuration、@Bean、@ComponentScan等</p><h2 id="_2-3-定制容器与bean的行为" tabindex="-1"><a class="header-anchor" href="#_2-3-定制容器与bean的行为" aria-hidden="true">#</a> 2.3 定制容器与Bean的行为</h2><h2 id="_2-4-容器中的几种抽象" tabindex="-1"><a class="header-anchor" href="#_2-4-容器中的几种抽象" aria-hidden="true">#</a> 2.4 容器中的几种抽象</h2>`,36);function h(g,y){const t=l("ExternalLinkIcon");return p(),o("div",null,[u,n("div",r,[d,k,m,n("p",null,[a("参考解决方法： "),n("a",v,[a("https://blog.csdn.net/weixin_43367967/article/details/85198352"),c(t)])])]),b])}const x=e(i,[["render",h],["__file","第二章：Spring Framework中的IoC容器.html.vue"]]);export{x as default};
