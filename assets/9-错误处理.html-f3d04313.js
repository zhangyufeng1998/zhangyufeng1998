import{_ as t,X as e,Y as p,a2 as a,Z as n,$ as s}from"./framework-a8949fcd.js";const o={},c=a(`<h2 id="_9-1-panic-不可恢复的错误" tabindex="-1"><a class="header-anchor" href="#_9-1-panic-不可恢复的错误" aria-hidden="true">#</a> 9.1 panic! 不可恢复的错误</h2><h3 id="rust错误处理概述" tabindex="-1"><a class="header-anchor" href="#rust错误处理概述" aria-hidden="true">#</a> Rust错误处理概述</h3><ul><li>Rust的可靠性：错误处理 <ul><li>大部分情况下：在编译时提示错误，并处理</li></ul></li><li>错误的分类 <ul><li><strong>可恢复</strong><ul><li>例如文件未找到，可再次尝试</li></ul></li><li><strong>不可恢复</strong><ul><li>bug，例如访问的索引超出范围</li></ul></li></ul></li><li>Rust没有其他语言类似<strong>异常</strong>的机制 <ul><li>可恢复错误：<code>Result&lt;T,E&gt;</code></li><li>不可恢复：panic! 宏</li></ul></li></ul><h3 id="不可恢复的错误与panic" tabindex="-1"><a class="header-anchor" href="#不可恢复的错误与panic" aria-hidden="true">#</a> 不可恢复的错误与panic!</h3><ul><li>当panic!宏执行时： <ul><li>你的程序会打印一个错误信息</li><li>展开（unwind）、清理调用栈（Stack）</li><li>退出程序</li></ul></li></ul><h3 id="为应对panic-展开或终止-abort-调用栈" tabindex="-1"><a class="header-anchor" href="#为应对panic-展开或终止-abort-调用栈" aria-hidden="true">#</a> 为应对panic，展开或终止（abort）调用栈</h3><ul><li>默认情况下，当panic发生： <ul><li>程序展开调用栈（工作量大） <ul><li>Rust沿着调用栈往回走</li><li>清理每个遇到的函数中的数据</li></ul></li><li>或立即中止调用栈： <ul><li>不进行清理，直接停止程序</li><li>内存需要OS进行清理</li></ul></li></ul></li><li>想让二进制文件更小，把设置从“展开”改为“中止”： <ul><li>在Cargo.toml中适当的profile部分设置 <ul><li>panic = &#39;abort&#39;</li></ul></li></ul></li></ul><h2 id="_9-2-result-与可恢复的错误" tabindex="-1"><a class="header-anchor" href="#_9-2-result-与可恢复的错误" aria-hidden="true">#</a> 9.2 Result 与可恢复的错误</h2><h3 id="result枚举" tabindex="-1"><a class="header-anchor" href="#result枚举" aria-hidden="true">#</a> Result枚举</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">enum</span> <span class="token type-definition class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">E</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>T：操作成功情况下，Ok变体里返回的数据</li><li>E：操作失败的情况下，Err变体里返回的错误的类型</li></ul><h3 id="处理result的一种方式-match表达式" tabindex="-1"><a class="header-anchor" href="#处理result的一种方式-match表达式" aria-hidden="true">#</a> 处理result的一种方式：match表达式</h3><ul><li>和Option枚举一样，Result及变体也是有prelude带入作用域</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token keyword">match</span> f <span class="token punctuation">{</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> file<span class="token punctuation">,</span>
        <span class="token class-name">Err</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Error opening file{:?}&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="匹配不同的错误" tabindex="-1"><a class="header-anchor" href="#匹配不同的错误" aria-hidden="true">#</a> 匹配不同的错误</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">ErrorKind</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token keyword">match</span> f <span class="token punctuation">{</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> file<span class="token punctuation">,</span>
        <span class="token class-name">Err</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">match</span> error<span class="token punctuation">.</span><span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ErrorKind</span><span class="token punctuation">::</span><span class="token class-name">NotFound</span> <span class="token operator">=&gt;</span> <span class="token keyword">match</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Ok</span><span class="token punctuation">(</span>fc<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> fc<span class="token punctuation">,</span>
                <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Error creating file:{:?}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            other_error <span class="token operator">=&gt;</span> <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Error opening the file:{:?}&quot;</span><span class="token punctuation">,</span> other_error<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>上面例子中使用了很多match</li><li>match很有用但是很原始</li><li>闭包（closure）。<code>Result&lt;T,E&gt;</code>有很多方法： <ul><li>他们接收闭包作为参数</li><li>使用match实现</li><li>使用这些方法会让代码更简洁</li></ul></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>error<span class="token closure-punctuation punctuation">|</span></span><span class="token punctuation">{</span>
       <span class="token keyword">if</span> error<span class="token punctuation">.</span><span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">ErrorKind</span><span class="token punctuation">::</span><span class="token class-name">NotFound</span><span class="token punctuation">{</span>
           <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>error<span class="token closure-punctuation punctuation">|</span></span><span class="token punctuation">{</span>
               <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span>error<span class="token punctuation">)</span>
           <span class="token punctuation">}</span><span class="token punctuation">)</span>
       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
           <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span>error<span class="token punctuation">)</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="unwrap" tabindex="-1"><a class="header-anchor" href="#unwrap" aria-hidden="true">#</a> unwrap</h3><ul><li>unwrap是match表达式的一个快捷方法</li><li><code>let f = File::open(&quot;hello.txt&quot;).unwrap();</code><ul><li>如果Result结果是Ok，返回Ok里面的值</li><li>如果Result结果是Err，调用panic!宏</li></ul></li></ul><h3 id="expect" tabindex="-1"><a class="header-anchor" href="#expect" aria-hidden="true">#</a> expect</h3><ul><li>和unwrap类似，但可以指定错误信息</li><li><code>let f = File::open(&quot;hello.txt&quot;).expect(&quot;打开失败&quot;);</code></li></ul><h2 id="_9-3-result-与可恢复的错误-下" tabindex="-1"><a class="header-anchor" href="#_9-3-result-与可恢复的错误-下" aria-hidden="true">#</a> 9.3 Result 与可恢复的错误（下）</h2><h3 id="传播错误" tabindex="-1"><a class="header-anchor" href="#传播错误" aria-hidden="true">#</a> 传播错误</h3><ul><li>在函数处处理错误</li><li>将错误返回给调用者</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token class-name">Read</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">read_username_from_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> f <span class="token operator">=</span> <span class="token keyword">match</span> f <span class="token punctuation">{</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> file<span class="token punctuation">,</span>
        <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">match</span> f<span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:#?}&quot;</span><span class="token punctuation">,</span> <span class="token function">read_username_from_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> ?运算符</h3><ul><li>?是传播错误的一种快捷方式</li><li>以下代码实现了和上面代码相同的功能</li></ul>`,28),l=n("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[n("pre",{rust:"",class:"language-rust"},[n("code",null,[n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token namespace"},[s("std"),n("span",{class:"token punctuation"},"::"),s("fs"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token class-name"},"File"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token namespace"},[s("std"),n("span",{class:"token punctuation"},"::"),s("io"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token punctuation"},"{"),n("span",{class:"token keyword"},"self"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Read"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"read_username_from_file"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token class-name"},"Result"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token class-name"},"Error"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" f "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"File"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"open"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"hello.txt"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" s "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    f`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"read_to_string"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(" s"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token class-name"},"Ok"),n("span",{class:"token punctuation"},"("),s("s"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"{:#?}"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"read_username_from_file"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),i=a('<ul><li>如果Result是Ok，Ok中的值就是表达式的结果，然后继续执行程序</li><li>如果Result是Err，Err就是<mark>整个函数</mark>的返回值，就像使用了return</li></ul><h3 id="与from函数" tabindex="-1"><a class="header-anchor" href="#与from函数" aria-hidden="true">#</a> ?与from函数</h3><ul><li>Trait std::convert::From上的from函数 <ul><li>用于错误之间的转换</li></ul></li><li>被?所应用的错误，会隐式的被from函数处理</li><li>当?调用from函数时 <ul><li>它所接收的错误类型会被转化为当前函数返回类型所定义的错误类型</li></ul></li><li>用于针对不同错误原因，返回同一种错误类型 <ul><li>只要每个错误类型实现了转换为所返回的错误类型的from函数</li></ul></li></ul><h3 id="运算符的链式调用" tabindex="-1"><a class="header-anchor" href="#运算符的链式调用" aria-hidden="true">#</a> ?运算符的链式调用</h3>',4),u=n("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[n("pre",{rust:"",class:"language-rust"},[n("code",null,[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"read_username_from_file"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token class-name"},"Result"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token class-name"},"Error"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" s "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token class-name"},"File"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"open"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"hello.txt"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"read_to_string"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"mut"),s(" s"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token class-name"},"Ok"),n("span",{class:"token punctuation"},"("),s("s"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),r=a('<h3 id="运算符只能用于返回result的函数" tabindex="-1"><a class="header-anchor" href="#运算符只能用于返回result的函数" aria-hidden="true">#</a> ?运算符只能用于返回Result的函数</h3><h2 id="_9-4-什么时候应该用panic" tabindex="-1"><a class="header-anchor" href="#_9-4-什么时候应该用panic" aria-hidden="true">#</a> 9.4 什么时候应该用panic!</h2><h3 id="总体原则" tabindex="-1"><a class="header-anchor" href="#总体原则" aria-hidden="true">#</a> 总体原则</h3><ul><li>在定义一个可能失败的函数的时候，优先考虑返回Result</li><li>否则就使用panic!</li></ul>',4),k=[c,l,i,u,r];function d(m,v){return e(),p("div",null,k)}const b=t(o,[["render",d],["__file","9-错误处理.html.vue"]]);export{b as default};
