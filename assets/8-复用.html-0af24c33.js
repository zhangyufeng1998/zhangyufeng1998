import{_ as a,X as e,Y as h,a2 as r}from"./framework-a8949fcd.js";const d={},i=r('<h1 id="复用" tabindex="-1"><a class="header-anchor" href="#复用" aria-hidden="true">#</a> 复用</h1><h2 id="如何复用" tabindex="-1"><a class="header-anchor" href="#如何复用" aria-hidden="true">#</a> 如何复用</h2><h3 id="组合-composition" tabindex="-1"><a class="header-anchor" href="#组合-composition" aria-hidden="true">#</a> 组合 composition</h3><h4 id="新类中使用现有类" tabindex="-1"><a class="header-anchor" href="#新类中使用现有类" aria-hidden="true">#</a> 新类中使用现有类</h4><h3 id="继承-inheritance" tabindex="-1"><a class="header-anchor" href="#继承-inheritance" aria-hidden="true">#</a> 继承 inheritance</h3><h4 id="按照现有类型进行复用" tabindex="-1"><a class="header-anchor" href="#按照现有类型进行复用" aria-hidden="true">#</a> 按照现有类型进行复用</h4><h4 id="调用导出类-先加载基类" tabindex="-1"><a class="header-anchor" href="#调用导出类-先加载基类" aria-hidden="true">#</a> 调用导出类，先加载基类</h4><h4 id="override" tabindex="-1"><a class="header-anchor" href="#override" aria-hidden="true">#</a> @Override</h4><h5 id="确保覆盖-而非重载" tabindex="-1"><a class="header-anchor" href="#确保覆盖-而非重载" aria-hidden="true">#</a> 确保覆盖，而非重载</h5><h3 id="代理-proxy" tabindex="-1"><a class="header-anchor" href="#代理-proxy" aria-hidden="true">#</a> 代理 proxy</h3><h4 id="继承和组合的中庸之道" tabindex="-1"><a class="header-anchor" href="#继承和组合的中庸之道" aria-hidden="true">#</a> 继承和组合的中庸之道</h4><h4 id="成员对象-构造的类中-组合" tabindex="-1"><a class="header-anchor" href="#成员对象-构造的类中-组合" aria-hidden="true">#</a> 成员对象 -&gt;构造的类中（组合）</h4><h4 id="在新类中暴露成员对象的所有方法-继承" tabindex="-1"><a class="header-anchor" href="#在新类中暴露成员对象的所有方法-继承" aria-hidden="true">#</a> 在新类中暴露成员对象的所有方法（继承）</h4><h2 id="组合vs继承" tabindex="-1"><a class="header-anchor" href="#组合vs继承" aria-hidden="true">#</a> 组合vs继承</h2><h3 id="组合-has-a" tabindex="-1"><a class="header-anchor" href="#组合-has-a" aria-hidden="true">#</a> 组合 has-a</h3><h4 id="显式-在新类中放置子对象" tabindex="-1"><a class="header-anchor" href="#显式-在新类中放置子对象" aria-hidden="true">#</a> 显式：在新类中放置子对象</h4><h4 id="复用具体实现-而非接口" tabindex="-1"><a class="header-anchor" href="#复用具体实现-而非接口" aria-hidden="true">#</a> 复用具体实现，而非接口</h4><h3 id="继承-is-a" tabindex="-1"><a class="header-anchor" href="#继承-is-a" aria-hidden="true">#</a> 继承 is-a</h3><h4 id="隐式-在新类中放置子对象" tabindex="-1"><a class="header-anchor" href="#隐式-在新类中放置子对象" aria-hidden="true">#</a> 隐式：在新类中放置子对象</h4><h4 id="新类-基类-复用接口" tabindex="-1"><a class="header-anchor" href="#新类-基类-复用接口" aria-hidden="true">#</a> 新类-&gt;基类，复用接口</h4><h4 id="向上转型" tabindex="-1"><a class="header-anchor" href="#向上转型" aria-hidden="true">#</a> 向上转型</h4><h5 id="新类是现有类的一种类型" tabindex="-1"><a class="header-anchor" href="#新类是现有类的一种类型" aria-hidden="true">#</a> 新类是现有类的一种类型</h5><h5 id="类接口可能丢失方法" tabindex="-1"><a class="header-anchor" href="#类接口可能丢失方法" aria-hidden="true">#</a> 类接口可能丢失方法</h5><h2 id="final关键字" tabindex="-1"><a class="header-anchor" href="#final关键字" aria-hidden="true">#</a> final关键字</h2><h3 id="数据" tabindex="-1"><a class="header-anchor" href="#数据" aria-hidden="true">#</a> 数据</h3><h4 id="基本类型" tabindex="-1"><a class="header-anchor" href="#基本类型" aria-hidden="true">#</a> 基本类型</h4><h4 id="引用" tabindex="-1"><a class="header-anchor" href="#引用" aria-hidden="true">#</a> 引用</h4><h5 id="引用不可变" tabindex="-1"><a class="header-anchor" href="#引用不可变" aria-hidden="true">#</a> 引用不可变</h5><h5 id="引用指向对象的内容-可变" tabindex="-1"><a class="header-anchor" href="#引用指向对象的内容-可变" aria-hidden="true">#</a> 引用指向对象的内容，可变</h5><h4 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h4><h5 id="无法改变参数所指向的对象" tabindex="-1"><a class="header-anchor" href="#无法改变参数所指向的对象" aria-hidden="true">#</a> 无法改变参数所指向的对象</h5><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h3><h4 id="防止继承类覆盖" tabindex="-1"><a class="header-anchor" href="#防止继承类覆盖" aria-hidden="true">#</a> 防止继承类覆盖</h4><h4 id="private方法隐式的为final的" tabindex="-1"><a class="header-anchor" href="#private方法隐式的为final的" aria-hidden="true">#</a> private方法隐式的为final的</h4><h5 id="无法获取-无法覆盖" tabindex="-1"><a class="header-anchor" href="#无法获取-无法覆盖" aria-hidden="true">#</a> 无法获取=无法覆盖</h5><h3 id="类" tabindex="-1"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类</h3><h4 id="无法被继承" tabindex="-1"><a class="header-anchor" href="#无法被继承" aria-hidden="true">#</a> 无法被继承</h4><h4 id="java的final类" tabindex="-1"><a class="header-anchor" href="#java的final类" aria-hidden="true">#</a> java的final类</h4><h5 id="基本类型的包装类" tabindex="-1"><a class="header-anchor" href="#基本类型的包装类" aria-hidden="true">#</a> 基本类型的包装类</h5><h5 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h5><h6 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h6><h6 id="stringbuilder" tabindex="-1"><a class="header-anchor" href="#stringbuilder" aria-hidden="true">#</a> StringBuilder</h6><h6 id="stringbuffer" tabindex="-1"><a class="header-anchor" href="#stringbuffer" aria-hidden="true">#</a> StringBuffer</h6><h5 id="数学" tabindex="-1"><a class="header-anchor" href="#数学" aria-hidden="true">#</a> 数学</h5><h6 id="math" tabindex="-1"><a class="header-anchor" href="#math" aria-hidden="true">#</a> Math</h6><h6 id="stricmath" tabindex="-1"><a class="header-anchor" href="#stricmath" aria-hidden="true">#</a> StricMath</h6><h5 id="系统" tabindex="-1"><a class="header-anchor" href="#系统" aria-hidden="true">#</a> 系统</h5><h6 id="system" tabindex="-1"><a class="header-anchor" href="#system" aria-hidden="true">#</a> System</h6><h6 id="class" tabindex="-1"><a class="header-anchor" href="#class" aria-hidden="true">#</a> Class</h6>',49),n=[i];function t(s,c){return e(),h("div",null,n)}const l=a(d,[["render",t],["__file","8-复用.html.vue"]]);export{l as default};
