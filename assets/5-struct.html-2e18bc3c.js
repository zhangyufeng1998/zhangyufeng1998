import{_ as t,X as e,Y as p,a2 as a,Z as n,$ as s}from"./framework-a8949fcd.js";const c={},i=a(`<h2 id="_5-1-定义和实例化struct" tabindex="-1"><a class="header-anchor" href="#_5-1-定义和实例化struct" aria-hidden="true">#</a> 5.1 定义和实例化struct</h2><h3 id="什么是struct" tabindex="-1"><a class="header-anchor" href="#什么是struct" aria-hidden="true">#</a> 什么是struct</h3><p>struct，结构体</p><ul><li>自定义的数据类型</li><li>为相关联的值命名，打包成有意义的组合</li></ul><h3 id="定义struct" tabindex="-1"><a class="header-anchor" href="#定义struct" aria-hidden="true">#</a> 定义struct</h3><ul><li><p>使用<mark>struct</mark>关键字，并为整个struct命名</p></li><li><p>在花括号内，为所有<mark>字段Field</mark>定义<strong>名称</strong>和<strong>类型</strong></p></li><li><p>例如:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">User</span><span class="token punctuation">{</span>
    userbane<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    sign_in_count<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    active<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="实例化struct" tabindex="-1"><a class="header-anchor" href="#实例化struct" aria-hidden="true">#</a> 实例化struct</h3><ul><li><p>想要使用stuct，需要创建stuct实例：</p><ul><li>为每个字段指定具体值</li><li>无需按声明的顺序进行指定</li></ul></li><li><p>例如</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">User</span><span class="token punctuation">{</span>
    username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    sign_in_count<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    active<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello,world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> user1 <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">{</span>
        email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;907392790@qq.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;zyf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        active<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        sign_in_count<span class="token punctuation">:</span> <span class="token number">1006</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="取得struct里面的某个值" tabindex="-1"><a class="header-anchor" href="#取得struct里面的某个值" aria-hidden="true">#</a> 取得struct里面的某个值</h3><ul><li><p>使用点标记法</p></li><li><p><code>print!(&quot;{}&quot;,user1.username);</code></p></li><li><p>修改某值<code>user1.email = String::from(&quot;another@example.com&quot;);</code>需要在实例化struct时声明mut<code>let mut user1 = User{...};</code></p><ul><li><mark>注</mark>一旦struct的实例是可变的，那么实例中所有字段都是可变的</li></ul></li></ul><h3 id="struct作为函数的返回值" tabindex="-1"><a class="header-anchor" href="#struct作为函数的返回值" aria-hidden="true">#</a> struct作为函数的返回值</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">build_user</span><span class="token punctuation">(</span>email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">User</span><span class="token punctuation">{</span>
    <span class="token class-name">User</span><span class="token punctuation">{</span>
        email<span class="token punctuation">:</span> email<span class="token punctuation">,</span>
        username<span class="token punctuation">:</span> username<span class="token punctuation">,</span>
        active<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        sign_in_count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>上面代码中Uer{}后面没有分号</p><p>在rust中函数的最后一个表达式就是它的返回值。</p></div><h3 id="字段初始化简写" tabindex="-1"><a class="header-anchor" href="#字段初始化简写" aria-hidden="true">#</a> 字段初始化简写</h3><p>当字段名与字段值对应变量名相同时，就可以使用字段初始化简写的方式</p><h3 id="struct-更新语法" tabindex="-1"><a class="header-anchor" href="#struct-更新语法" aria-hidden="true">#</a> struct 更新语法</h3><p>当你想基于某个struct实例来创建一个新的实例的时候，可以使用struct更新语法</p><p>正常写法：</p>`,18),o=n("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[n("pre",{rust:"",class:"language-rust"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" user2 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"User"),n("span",{class:"token punctuation"},"{"),s(`
    email`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"from"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"907392790@11.com"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
    username`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"from"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"zyf"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
    acitve`),n("span",{class:"token punctuation"},":"),s(" user1"),n("span",{class:"token punctuation"},"."),s("active"),n("span",{class:"token punctuation"},","),s(`
    sign_in_count`),n("span",{class:"token punctuation"},":"),s(" user1"),n("span",{class:"token punctuation"},"."),s("sign_in_count"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),l=n("p",null,"更新语法：",-1),u=n("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[n("pre",{rust:"",class:"language-rust"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" user2 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"User"),n("span",{class:"token punctuation"},"{"),s(`
    email`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"from"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"907392790@11.com"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
    username`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"from"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"zyf"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token punctuation"},".."),s(`user1
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),r=a(`<h3 id="tuple-struct" tabindex="-1"><a class="header-anchor" href="#tuple-struct" aria-hidden="true">#</a> Tuple struct</h3><ul><li>可以定义类似tuple的struct，叫做tuple struct <ul><li>Tuple struct整体有个名，但里面的元素没有名</li><li>适用：想给整个tuple起名，并让他不同于其他tuple，而且不需要给每个元素起名</li></ul></li><li>定义tuple struct：使用struct关键字，后面是名字，以及里面的元素的类型</li><li>例子<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Color</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span><span class="token keyword">i32</span><span class="token punctuation">,</span><span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span><span class="token keyword">i32</span><span class="token punctuation">,</span><span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> black <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> origin <span class="token operator">=</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><mark>注</mark>black and origin is different type,是不同tuple struct的实例</li></ul><h3 id="unit-like-struct" tabindex="-1"><a class="header-anchor" href="#unit-like-struct" aria-hidden="true">#</a> Unit-Like Struct</h3><p>pass！</p><h3 id="struct-数据的所有权" tabindex="-1"><a class="header-anchor" href="#struct-数据的所有权" aria-hidden="true">#</a> struct 数据的所有权</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">User</span><span class="token punctuation">{</span>
    username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    sign_in_count<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    active<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里的字段使用了String而不是&amp;str： <ul><li>该struct实例拥有其所有的数据</li><li>只要struct实例是有效的，那么里面的字段数据也是有效的</li></ul></li><li>struct里也可以存放引用，但是这需要使用生命周期（后续讲）</li></ul><h2 id="_5-2-struct-例子" tabindex="-1"><a class="header-anchor" href="#_5-2-struct-例子" aria-hidden="true">#</a> 5.2 struct 例子</h2><p>使用rust写一个计算长方形面积的例子</p><p>简单写法：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> w <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> l <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
    <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span><span class="token function">area</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">fn</span> <span class="token function-definition function">area</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span> length<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u32</span> <span class="token punctuation">{</span>
    width <span class="token operator">*</span> length
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用元组写：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 声明以个长方形元组</span>
    <span class="token keyword">let</span> rect <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> <span class="token function">area</span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">fn</span> <span class="token function-definition function">area</span><span class="token punctuation">(</span>dim<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">u32</span><span class="token punctuation">,</span> <span class="token keyword">u32</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u32</span> <span class="token punctuation">{</span>
    dim<span class="token number">.0</span> <span class="token operator">*</span> dim<span class="token number">.1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用struct重构:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Rectangle</span> <span class="token punctuation">{</span>
    width<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    length<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> rect <span class="token operator">=</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>
        width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
        length<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rect<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">fn</span> <span class="token function-definition function">area</span><span class="token punctuation">(</span>rect<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Rectangle</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u32</span> <span class="token punctuation">{</span>
    rect<span class="token punctuation">.</span>width <span class="token operator">*</span> rect<span class="token punctuation">.</span>length
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="将struct打印" tabindex="-1"><a class="header-anchor" href="#将struct打印" aria-hidden="true">#</a> 将struct打印</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Rectangle</span> <span class="token punctuation">{</span>
    width<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    length<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> rect <span class="token operator">=</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>
        width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
        length<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;{:#?}&quot;</span><span class="token punctuation">,</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-3-struct方法" tabindex="-1"><a class="header-anchor" href="#_5-3-struct方法" aria-hidden="true">#</a> 5.3 struct方法</h2><h3 id="struct的方法" tabindex="-1"><a class="header-anchor" href="#struct的方法" aria-hidden="true">#</a> struct的方法</h3><ul><li>方法和函数类似：fn关键字、名称、参数、返回值</li><li>方法与函数的不同之处 <ul><li>方法是在struct（或enum、trait对象）的上下文定义的</li><li>方法的第一个参数是self，表示方法被调用的struct实例</li></ul></li></ul><h3 id="定义方法" tabindex="-1"><a class="header-anchor" href="#定义方法" aria-hidden="true">#</a> 定义方法</h3><ul><li>在impl块里定义方法</li><li>方法的第一个参数可以是&amp;self，也可以获得其所有权或可变借用。和其他参数一样</li><li>更良好的代码结构</li><li>例子：</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Rectangle</span> <span class="token punctuation">{</span>
    width<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    length<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">impl</span> <span class="token class-name">Rectangle</span><span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u32</span><span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>length
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> rect <span class="token operator">=</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>
        width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
        length<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span>rect<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;{:#?}&quot;</span><span class="token punctuation">,</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法调用的运算符" tabindex="-1"><a class="header-anchor" href="#方法调用的运算符" aria-hidden="true">#</a> 方法调用的运算符</h3><ul><li>在c/c++中：<code>object-&gt;someting()</code>和<code>(*object).something()</code>一样</li><li>rust没有<code>-&gt;</code>运算符</li><li>rust会自动引用或解引用 <ul><li>在调用方法的时候会发生这种行为</li></ul></li><li>在调用方法时，rust会根据情况自动添加&amp;、&amp;mut或*(解引用)以便object可以匹配方法的签名</li><li>下面两行代码效果相同 <ul><li><code>p1.distance(&amp;p2);</code></li><li><code>(&amp;p1).distance(&amp;p2);</code></li></ul></li></ul><h3 id="方法参数" tabindex="-1"><a class="header-anchor" href="#方法参数" aria-hidden="true">#</a> 方法参数</h3><p>例子</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Rectangle</span> <span class="token punctuation">{</span>
    width<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    length<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">impl</span> <span class="token class-name">Rectangle</span><span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u32</span><span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>length
    <span class="token punctuation">}</span>
    <span class="token comment">// 定义一个方法，判断一个矩形是否能容纳另一个矩形</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">can_hold</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span>other<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Rectangle</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span><span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">&gt;</span> other<span class="token punctuation">.</span>width <span class="token operator">&amp;&amp;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>length <span class="token operator">&gt;</span> other<span class="token punctuation">.</span>length
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> rect1 <span class="token operator">=</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>
        width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
        length<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> rect2 <span class="token operator">=</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>
        width<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
        length<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> rect3 <span class="token operator">=</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>
        width<span class="token punctuation">:</span> <span class="token number">35</span><span class="token punctuation">,</span>
        length<span class="token punctuation">:</span> <span class="token number">55</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;矩形1的面积为{}&quot;</span><span class="token punctuation">,</span>rect1<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;矩形2的面积为{}&quot;</span><span class="token punctuation">,</span>rect2<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;矩形3的面积为{}&quot;</span><span class="token punctuation">,</span>rect3<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span>rect1<span class="token punctuation">.</span><span class="token function">can_hold</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rect2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span>rect1<span class="token punctuation">.</span><span class="token function">can_hold</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rect3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>矩形1的面积为1500
矩形2的面积为400
矩形3的面积为1925
true
false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关联函数" tabindex="-1"><a class="header-anchor" href="#关联函数" aria-hidden="true">#</a> 关联函数</h3><ul><li>可以在impl块里定义不把self作为第一个参数的函数，它们叫关联函数（不是方法） <ul><li>例如：<code>String::from()</code></li></ul></li><li>关联函数通常用构造器</li><li>::符号 <ul><li>关联函数</li><li>模块创建的命名空间</li></ul></li><li>例子：</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// 定义关联函数</span>
<span class="token keyword">fn</span> <span class="token function-definition function">square</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Rectangle</span><span class="token punctuation">{</span>
        <span class="token class-name">Rectangle</span><span class="token punctuation">{</span>
            width<span class="token punctuation">:</span> size<span class="token punctuation">,</span>
            length<span class="token punctuation">:</span> szie<span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token comment">// 使用关联函数</span>
<span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">Rectangle</span><span class="token punctuation">::</span><span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多个impl块" tabindex="-1"><a class="header-anchor" href="#多个impl块" aria-hidden="true">#</a> 多个impl块</h3><p>可以把多个方法拆分成不同的impl块</p>`,35),d=[i,o,l,u,r];function k(m,v){return e(),p("div",null,d)}const h=t(c,[["render",k],["__file","5-struct.html.vue"]]);export{h as default};
