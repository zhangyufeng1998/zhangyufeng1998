import{_ as t,X as e,Y as p,a2 as a,Z as n,$ as s}from"./framework-a8949fcd.js";const l={},i=a(`<h2 id="_10-1-如何提取函数消除重复" tabindex="-1"><a class="header-anchor" href="#_10-1-如何提取函数消除重复" aria-hidden="true">#</a> 10.1 如何提取函数消除重复</h2><h3 id="重复代码" tabindex="-1"><a class="header-anchor" href="#重复代码" aria-hidden="true">#</a> 重复代码</h3><ul><li>危害 <ul><li>容易出错</li><li>需求变更时需要在多处修改</li></ul></li><li>消除重复：定义函数</li></ul><h3 id="消除重复的步骤" tabindex="-1"><a class="header-anchor" href="#消除重复的步骤" aria-hidden="true">#</a> 消除重复的步骤</h3><ul><li>识别重复代码</li><li>提取重复代码到函数体中，并在函数签名中指定函数的输入和返回值</li><li>将重复的代码使用函数调用进行替代</li></ul><h2 id="_10-2-泛型" tabindex="-1"><a class="header-anchor" href="#_10-2-泛型" aria-hidden="true">#</a> 10.2 泛型</h2><h3 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h3><ul><li>泛型：提高代码<mark>复用</mark>能力</li><li>泛型是具体类型或其他属性的抽象代替 <ul><li>编写的代码不是最终的代码，而是一种<strong>模板</strong>，里面有一些<mark>占位符</mark></li><li>编译器在<mark>编译的时候</mark>，将占位符<mark>替换为具体的类型</mark>。</li></ul></li><li><code>fn largest&lt;T&gt;(list:&amp;[T]) -&gt; T{...}</code>(单态化)</li><li>类型参数 <ul><li>很短，通常一个字母</li><li>camelCase</li><li>T：type的缩写</li></ul></li></ul><h3 id="函数中定义的泛型" tabindex="-1"><a class="header-anchor" href="#函数中定义的泛型" aria-hidden="true">#</a> 函数中定义的泛型</h3><ul><li>泛型函数 <ul><li>类型参数</li><li>返回类型</li></ul></li></ul><h3 id="struct定义中的泛型" tabindex="-1"><a class="header-anchor" href="#struct定义中的泛型" aria-hidden="true">#</a> Struct定义中的泛型</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    x<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>
    y<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> integer <span class="token operator">=</span> <span class="token class-name">Point</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> float <span class="token operator">=</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">4.0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">U</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    x<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>
    y<span class="token punctuation">:</span> <span class="token class-name">U</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> integer <span class="token operator">=</span> <span class="token class-name">Point</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">1.0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以使用多个泛型类型的参数 <ul><li>太多类型参数：意味着你的代码需要重组为多个更小的单元</li></ul></li></ul><h3 id="enum定义中的泛型" tabindex="-1"><a class="header-anchor" href="#enum定义中的泛型" aria-hidden="true">#</a> Enum定义中的泛型</h3><ul><li>可以让枚举的变体持有泛型数据类型 <ul><li>例如<code>Option&lt;T&gt;</code> <code>Result&lt;T,E&gt;</code></li></ul></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">enum</span> <span class="token type-definition class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">None</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token type-definition class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">E</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法定义中的泛型" tabindex="-1"><a class="header-anchor" href="#方法定义中的泛型" aria-hidden="true">#</a> 方法定义中的泛型</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    x<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>
    y<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">// impl&lt;T&gt; 表示针对T这个参数</span>
<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">x</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token class-name">T</span> <span class="token punctuation">{</span>
        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>x
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;p.x = {}&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>把T放在impl关键字后面，表示在类型T上实现方法 <ul><li><code>impl&lt;T&gt; point&lt;T&gt;</code></li></ul></li><li>只针对具体类型实现方法（其余类型没实现方法）： <ul><li>例如：<code>impl Point&lt;f32&gt;</code></li></ul></li><li>struct里的泛型类型参数可以和方法的泛型类型参数不同</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    x<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>
    y<span class="token punctuation">:</span> <span class="token class-name">U</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token operator">&gt;</span> <span class="token class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">mixup</span><span class="token operator">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">W</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> other<span class="token punctuation">:</span> <span class="token class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">W</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">W</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">Point</span> <span class="token punctuation">{</span>
            x<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>
            y<span class="token punctuation">:</span> other<span class="token punctuation">.</span>y<span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型代码的性能" tabindex="-1"><a class="header-anchor" href="#泛型代码的性能" aria-hidden="true">#</a> 泛型代码的性能</h3><ul><li>使用泛型代码和使用具体类型的代码的运行速度是一样的</li><li>单态化（monomorphization） <ul><li>在编译时将泛型替换为具体类型的过程</li></ul></li></ul><h2 id="_10-3-trait-上" tabindex="-1"><a class="header-anchor" href="#_10-3-trait-上" aria-hidden="true">#</a> 10.3 Trait（上）</h2><ul><li>Trait告诉Rust编译器 <ul><li>某种类型具有哪些并且可以与其他类型共享的功能</li></ul></li><li>Trait：抽象的定义共享行为</li><li>Trait bounds（约束）：泛型类型参数指定为实现了特定行为的类型</li><li>Trait与其它语言的接口（interface）类似，但又有区别</li></ul><h3 id="定义一个trait" tabindex="-1"><a class="header-anchor" href="#定义一个trait" aria-hidden="true">#</a> 定义一个Trait</h3><ul><li>Trait的定义：把方法签名放在一起，来定义实现某种目的所必须的一组行为 <ul><li>关键字：trait</li><li>只有方法签名，没有具体实现</li><li>trait可以有多个方法，每个方法签名占一行，以;结尾</li><li>实现该trait的类型必须提供具体的方法实现</li></ul></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">Summary</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">summarize1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">summarize2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在类型上实现trait" tabindex="-1"><a class="header-anchor" href="#在类型上实现trait" aria-hidden="true">#</a> 在类型上实现trait</h3><ul><li>与为类型实现方法很类似</li><li>不同之处： <ul><li><code>impl Xxxx for Tweet {...}</code></li><li>在impl块里，需要对Trait里的方法前面进行具体的实现</li></ul></li></ul><h3 id="实现trait约束" tabindex="-1"><a class="header-anchor" href="#实现trait约束" aria-hidden="true">#</a> 实现trait约束</h3><ul><li>可以在某个类型上实现某个trait的前提条件是 <ul><li>这个类型或这个trait实在本地crate里定义的</li></ul></li><li>无法为外部类型来实现外部的trait <ul><li>这个限制是程序属性的一部分（也就是<mark>一致性</mark>）</li><li>更具体的说是孤儿规则：之所以这样命名是因为父类型不存在</li><li>此规则确保其他人的代码不能破坏您的代码，反之亦然</li><li>如果没有这个规则，两个crate可以为同一类型实现同一个trait，Rust就不知道该使用哪一个了</li></ul></li></ul><h3 id="默认实现" tabindex="-1"><a class="header-anchor" href="#默认实现" aria-hidden="true">#</a> 默认实现</h3><ul><li>默认实现的方法可以调用trait中其他的方法，即使这些方法没有默认实现</li><li><strong>注</strong>：无法从方法的重写实现里调用默认的实现</li></ul><h2 id="_10-4-trait-下" tabindex="-1"><a class="header-anchor" href="#_10-4-trait-下" aria-hidden="true">#</a> 10.4 Trait（下）</h2><h3 id="把trait作为参数" tabindex="-1"><a class="header-anchor" href="#把trait作为参数" aria-hidden="true">#</a> 把trait作为参数</h3><ul><li>impl trait 语法：适用于简单情况</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// 实现了Summary trait的类型</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token keyword">impl</span> <span class="token class-name">Summary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>trait bound语法：适用于复杂情况 <ul><li>impl trait语法就是trait bound的语法糖</li></ul></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Summary</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用+指定多个trait bound</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>pun <span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token keyword">impl</span> <span class="token class-name">Summary</span> <span class="token operator">+</span> <span class="token class-name">Display</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Summary</span> <span class="token operator">+</span> <span class="token class-name">Display</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>trait bound 使用 where子句</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">U</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token class-name">T</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token class-name">U</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span>
<span class="token keyword">where</span>
    <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Summary</span> <span class="token operator">+</span> <span class="token class-name">Display</span><span class="token punctuation">,</span>
    <span class="token class-name">U</span><span class="token punctuation">:</span><span class="token class-name">Clone</span> <span class="token operator">+</span> <span class="token class-name">DeBug</span><span class="token punctuation">,</span>
<span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用trait作为返回类型" tabindex="-1"><a class="header-anchor" href="#使用trait作为返回类型" aria-hidden="true">#</a> 使用trait作为返回类型</h3><ul><li><strong>注意</strong>：使用impl trait只能返回确定的同一种类型，返回可能不同类型的代码会报错</li></ul><h3 id="使用trait-bound的例子" tabindex="-1"><a class="header-anchor" href="#使用trait-bound的例子" aria-hidden="true">#</a> 使用trait bound的例子</h3><ul><li>例子 使用trait bound修复largest函数</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">largest</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">PartialOrd</span> <span class="token operator">+</span> <span class="token class-name">Copy</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>list<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">T</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> largest <span class="token operator">=</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token operator">&amp;</span>item <span class="token keyword">in</span> list<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> item <span class="token operator">&gt;</span> largest <span class="token punctuation">{</span> <span class="token comment">// std::cmp::PartialOrd</span>
            largest <span class="token operator">=</span> item<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    largest
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> number_list <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">largest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>number_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The largest number is {}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> char_list <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;z&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;y&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;f&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">largest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>char_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The largest char is {}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用trait-bound有条件的实现方法" tabindex="-1"><a class="header-anchor" href="#使用trait-bound有条件的实现方法" aria-hidden="true">#</a> 使用trait bound有条件的实现方法</h3><ul><li>在使用泛型类型的参数的impl块上使用trait bound，我们可以有条件的为实现了特定trait的类型来实现方法</li><li>以下例子中，必须实现Display和PartialOrd这两个trait时，才具有cmp_display方法</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Display</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token type-definition class-name">Pair</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    x<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>
    y<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Pair</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token keyword">Self</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Display</span> <span class="token operator">+</span> <span class="token class-name">PartialOrd</span><span class="token operator">&gt;</span> <span class="token class-name">Pair</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">cmp_display</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x <span class="token operator">&gt;=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>y <span class="token punctuation">{</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The largest member is x = {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The largest member is y = {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>也可以为实现了其他trait的任意类型有条件的实现某个trait</li><li>为满足trait bound 的所有类型上实现trait叫做覆盖实现（blanket implementations）</li></ul><h2 id="_10-5-生命周期-1-4" tabindex="-1"><a class="header-anchor" href="#_10-5-生命周期-1-4" aria-hidden="true">#</a> 10.5 生命周期（1/4）</h2><h3 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h3><ul><li>Rust的每个引用都有自己的生命周期。</li><li>生命周期：引用保持有效的作用域。</li><li>大多数情况：生命周期是隐式的、可被推断的</li><li>当引用的生命周期可能以不同的方式相互关联时：手动标注生命周期</li></ul><h3 id="生命周期-避免悬垂引用-dangling-reference" tabindex="-1"><a class="header-anchor" href="#生命周期-避免悬垂引用-dangling-reference" aria-hidden="true">#</a> 生命周期-避免悬垂引用（dangling reference）</h3><ul><li>生命周期的主要目标：避免悬垂引用</li></ul><h3 id="借用检查器" tabindex="-1"><a class="header-anchor" href="#借用检查器" aria-hidden="true">#</a> 借用检查器</h3><h3 id="函数中的泛型生命周期" tabindex="-1"><a class="header-anchor" href="#函数中的泛型生命周期" aria-hidden="true">#</a> 函数中的泛型生命周期</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> string1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;zyf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> string2 <span class="token operator">=</span> <span class="token string">&quot;zyfstc&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">longest</span><span class="token punctuation">(</span>string1<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> string2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The longest string is {}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">longest</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> x<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> y<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        x
    <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>
        y
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-6-生命周期-2-4" tabindex="-1"><a class="header-anchor" href="#_10-6-生命周期-2-4" aria-hidden="true">#</a> 10.6 生命周期（2/4）</h2><h3 id="生命周期标注" tabindex="-1"><a class="header-anchor" href="#生命周期标注" aria-hidden="true">#</a> 生命周期标注</h3><ul><li>生命周期的标注不会改变引用的生命周期长度</li><li>当指定了泛型生命周期参数，函数可以接收带有任何生命周期的引用</li><li>生命周期的标注：描述了多个引用的生命周期间的关系，但不会影响生命周期</li></ul><h3 id="生命周期标注-语法" tabindex="-1"><a class="header-anchor" href="#生命周期标注-语法" aria-hidden="true">#</a> 生命周期标注-语法</h3><ul><li>生命周期参数名 <ul><li>以<code>&#39;</code>开头</li><li>通常全小写并且非常短</li><li>很多人喜欢使用<code>&#39;a</code></li></ul></li><li>生命周期标注的位置 <ul><li>在引用的&amp;符号后</li><li>使用空格将标注和引用类型分开</li></ul></li></ul><h3 id="生命周期标注例子" tabindex="-1"><a class="header-anchor" href="#生命周期标注例子" aria-hidden="true">#</a> 生命周期标注例子</h3><ul><li><code>&amp;i32</code> //一个引用</li><li><code>&amp;&#39;a i32</code> //带有显式生命周期的引用</li><li><code>&amp;&#39;a mut i32</code>//带有显式生命周期的可变引用</li><li>单个生命周期标注本身没有意义</li></ul><h3 id="函数签名中的生命周期标注" tabindex="-1"><a class="header-anchor" href="#函数签名中的生命周期标注" aria-hidden="true">#</a> 函数签名中的生命周期标注</h3><h2 id="_10-6-生命周期-3-4" tabindex="-1"><a class="header-anchor" href="#_10-6-生命周期-3-4" aria-hidden="true">#</a> 10.6 生命周期（3/4）</h2><h3 id="深入理解生命周期" tabindex="-1"><a class="header-anchor" href="#深入理解生命周期" aria-hidden="true">#</a> 深入理解生命周期</h3><ul><li>指定生命周期参数的方式依赖于函数所做的事情</li><li>从函数返回引用时，返回类型的生命周期参数需要与其中一个参数的生命周期相匹配</li><li>如果返回的引用没有指向任何参数，那么它只能引用函数内创建的值： <ul><li>这就是悬垂引用：该值在函数结束时就走出了作用域</li></ul></li></ul>`,73),o=n("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[n("pre",{rust:"",class:"language-rust"},[n("code",null,[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" string1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"from"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"abcd"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" string2 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"xyz"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" result "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"longest"),n("span",{class:"token punctuation"},"("),s("string1"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"as_str"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(" string2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"The longest string is {}"'),n("span",{class:"token punctuation"},","),s(" result"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"longest"),n("span",{class:"token operator"},"<"),n("span",{class:"token lifetime-annotation symbol"},"'a"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),s("x"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token lifetime-annotation symbol"},"'a"),s(),n("span",{class:"token keyword"},"str"),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"str"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token lifetime-annotation symbol"},"'a"),s(),n("span",{class:"token keyword"},"str"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" result "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"from"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"abc"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    result`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"as_str"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),c=a(`<div class="hint-container danger"><p class="hint-container-title">报错</p><p>result.as_str()</p><p>^^^^^^^^^^^^^^^ returns a reference to data owned by the current function</p><p><code>return.as_str()</code>返回的是内部变量result的地址，</p><p>但是命令执行完这块内存就被清理了，造成了悬垂引用</p></div><h3 id="struct结构体定义中的生命周期标注" tabindex="-1"><a class="header-anchor" href="#struct结构体定义中的生命周期标注" aria-hidden="true">#</a> struct结构体定义中的生命周期标注</h3><ul><li>Struct里可以包括： <ul><li>自持有的类型（String，i32）</li><li>引用：需要在每个引用上添加生命周期标注</li></ul></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// 表示part这个字段必须比这个结构体实例存活的时间长</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">importantExcerpt</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    part<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生命周期的省略" tabindex="-1"><a class="header-anchor" href="#生命周期的省略" aria-hidden="true">#</a> 生命周期的省略</h3><ul><li>我们知道 <ul><li>每个引用都有生命周期</li><li>需要为使用生命周期的函数或struct指定生命周期参数</li></ul></li></ul><h4 id="生命周期省略规则" tabindex="-1"><a class="header-anchor" href="#生命周期省略规则" aria-hidden="true">#</a> 生命周期省略规则</h4><ul><li>在Rust引用分析中所编入的模式称为生命周期省略规则 <ul><li>这些规则无需开发者来遵守</li><li>它们是一些特殊情况，由编译器来考虑</li><li>如果你的代码符合这些情况，那么就无需显式标注生命周期</li></ul></li><li>生命周期省略规则不会提供完胜的推断</li></ul><h3 id="输入、输出的生命周期" tabindex="-1"><a class="header-anchor" href="#输入、输出的生命周期" aria-hidden="true">#</a> 输入、输出的生命周期</h3><ul><li>函数、方法的参数：输入生命周期</li><li>函数、方法的返回值：输出生命周期</li></ul><h3 id="生命周期省略的三个规则" tabindex="-1"><a class="header-anchor" href="#生命周期省略的三个规则" aria-hidden="true">#</a> 生命周期省略的三个规则</h3><ul><li><p>编译器使用3个规则在没有显式标注生命周期的情况下，来确定引用的生命周期</p><ul><li>规则1应用于输入生命周期</li><li>规则2、3应用于输出生命周期</li><li>如果编译器应用完3个规则之后，仍然无法确定声明周期的引用-&gt;报错</li><li>这些规则适用于fn定义和impl块</li></ul></li><li><p>规则1：每个引用类型的参数都有自己的生命周期</p></li><li><p>规则2：如果只有一个输入生命周期参数，那么该生命周期被赋给所有的输出生命周期函数</p></li><li><p>规则3：如果有多个输入生命周期参数，但其中一个是&amp;self或&amp;mut self (是方法)，那么self的生命周期会赋给所有的输出生命周期参数</p></li></ul><h3 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h3><p><code>pass</code></p><h2 id="_10-8-生命周期-4-4" tabindex="-1"><a class="header-anchor" href="#_10-8-生命周期-4-4" aria-hidden="true">#</a> 10.8 生命周期（4/4）</h2><h3 id="方法定义中的生命周期标注" tabindex="-1"><a class="header-anchor" href="#方法定义中的生命周期标注" aria-hidden="true">#</a> 方法定义中的生命周期标注</h3><ul><li>在struct上使用生命周期实现方法，语法和泛型参数的语法一样</li><li>在哪声明和使用生命周期参数，依赖于： <ul><li>生命周期参数是否和<strong>字段</strong>、<strong>方法的参数或返回值</strong>有关</li></ul></li><li>struct字段的生命周期名： <ul><li>在impl后声明</li><li>在struct名后使用</li><li>这些生命周期是struct类型的一部分</li></ul></li><li>impl块内的方法签名中： <ul><li>引用必须绑定与struct字段引用的生命周期，或者<mark>引用</mark>是独立的也可以</li><li>生命周期省略规则经常使得方法中的生命周期标注不是必须的</li></ul></li></ul><h3 id="静态生命周期" tabindex="-1"><a class="header-anchor" href="#静态生命周期" aria-hidden="true">#</a> 静态生命周期</h3><ul><li>&#39;static是一个特殊的生命周期：整个程序的持续时间 <ul><li>例如：所有的字符串字面值都拥有&#39;static生命周期 <ul><li><code>let s:&amp;&#39;static str = &quot;I have a static lifetime.&quot;;</code></li></ul></li></ul></li><li>要小心为引用指定&#39;static生命周期 <ul><li>是否需要引用在整个生命周期内都存活</li></ul></li></ul><h3 id="泛型参数类型、trait-bound、生命周期" tabindex="-1"><a class="header-anchor" href="#泛型参数类型、trait-bound、生命周期" aria-hidden="true">#</a> 泛型参数类型、trait bound、生命周期</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Display</span><span class="token punctuation">;</span>
<span class="token keyword">fn</span> <span class="token function-definition function">longest_with_an_announcement</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> sty<span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span> ann<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span>
    <span class="token keyword">where</span>
        <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Display</span>
<span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Announcement!{}&quot;</span><span class="token punctuation">,</span> ann<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> x<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> y<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        x
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        y
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),u=[i,o,c];function r(d,k){return e(),p("div",null,u)}const v=t(l,[["render",r],["__file","10-.html.vue"]]);export{v as default};
