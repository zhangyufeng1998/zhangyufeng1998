const t=JSON.parse('{"key":"v-44fe0a3c","path":"/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9B%86%E5%90%88.html","title":"","lang":"zh-CN","frontmatter":{"description":"集合 ArrayList ArrayList的扩容规则 Iterator的fail-fast、fail-safe机制 扩容机制 无参构造容量是0，如果传入的是一个集合，容量就是集合的大小； 首次扩容，容量增加到10，新数组替换掉旧的数组（0-&gt;10） 以后扩容会扩容到原来容量的1.5倍（底层用移位运算，右移1位再加上原始容量），将旧数组的元素拷贝的新数组上 上面是add方法；addAll添加的是collection集合，扩容是选择下次扩容（正常情况下）和实际元素个数的较大值。","head":[["meta",{"property":"og:url","content":"https://zhangyufeng19988.github.io/zyf/posts/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9B%86%E5%90%88.html"}],["meta",{"property":"og:description","content":"集合 ArrayList ArrayList的扩容规则 Iterator的fail-fast、fail-safe机制 扩容机制 无参构造容量是0，如果传入的是一个集合，容量就是集合的大小； 首次扩容，容量增加到10，新数组替换掉旧的数组（0-&gt;10） 以后扩容会扩容到原来容量的1.5倍（底层用移位运算，右移1位再加上原始容量），将旧数组的元素拷贝的新数组上 上面是add方法；addAll添加的是collection集合，扩容是选择下次扩容（正常情况下）和实际元素个数的较大值。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"ZYF"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ZYF\\",\\"url\\":\\"https://zhangyufeng19989.github.io\\",\\"email\\":\\"907392790@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"集合","slug":"集合","link":"#集合","children":[{"level":3,"title":"ArrayList","slug":"arraylist","link":"#arraylist","children":[]},{"level":3,"title":"LinkedList","slug":"linkedlist","link":"#linkedlist","children":[]},{"level":3,"title":"HashMap","slug":"hashmap","link":"#hashmap","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.26,"words":977},"filePathRelative":"posts/面试题/集合.md","excerpt":"<h2> 集合</h2>\\n<h3> ArrayList</h3>\\n<ul>\\n<li>\\n<p>ArrayList的扩容规则</p>\\n</li>\\n<li>\\n<p>Iterator的fail-fast、fail-safe机制</p>\\n</li>\\n</ul>\\n<h4> 扩容机制</h4>\\n<p>无参构造容量是0，如果传入的是一个集合，容量就是集合的大小；</p>\\n<p>首次扩容，容量增加到10，新数组替换掉旧的数组（0-&gt;10）</p>\\n<p>以后扩容会扩容到原来容量的1.5倍（底层用移位运算，右移1位再加上原始容量），将旧数组的元素拷贝的新数组上</p>\\n<p>上面是add方法；addAll添加的是collection集合，扩容是选择下次扩容（正常情况下）和实际元素个数的较大值。</p>","autoDesc":true}');export{t as data};
