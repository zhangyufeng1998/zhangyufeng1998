const n=JSON.parse('{"key":"v-b60e7cce","path":"/posts/rust/rust%E5%85%A5%E9%97%A8/20-.html","title":"20.web服务器","lang":"zh-CN","frontmatter":{"title":"20.web服务器","icon":null,"description":"20.1 单线程Web服务器 构建Web服务器 在socket上监听TCP连接 解析少量的HTTP请求 HTTP请求建立在TCP之上，描述了请求和响应的内容 创建一个合适的HTTP响应 使用线程池来改进服务器的吞吐量 use std::fs; use std::io::{Read, Write}; use std::net::{TcpListener, TcpStream}; fn main() { let listener = TcpListener::bind(\\"127.0.0.1:7878\\").unwrap(); for stream in listener.incoming() { let stream = stream.unwrap(); handle_connect(stream); } } fn handle_connect(mut stream: TcpStream) { let mut buffer = [0; 1024]; // println!(\\"{:?}\\",stream); stream.read(&amp;mut buffer).unwrap(); // println!(\\"Request {} \\",String::from_utf8_lossy(&amp;buffer[..])); // 请求 // Method Request-URI HTTP-Version CRLF // headers CRLF // message-body // 响应 // Http-Version Status-Code Reason-Phrase CRLF // headers CRLF // message-body let get = b\\"GET / HTTP/1.1\\\\r\\\\n\\"; let (status_line,filename) = if buffer.starts_with(get){ (\\"HTTP/1.1 200 OK\\\\r\\\\n\\\\r\\\\n\\",\\"hello.html\\") } else { (\\"HTTP/1.1 404 NOT FOUND\\\\r\\\\n\\\\r\\\\n\\",\\"404.html\\") }; let contents = fs::read_to_string(filename ).unwrap(); let response = format!(\\"{}{}\\",status_line,contents); stream.write(response.as_bytes()).expect(\\"~\\"); stream.flush().unwrap(); // 等待并阻止程序的运行，直到所有字节写入完成 println!(\\"yes!\\"); }","head":[["meta",{"property":"og:url","content":"https://zhangyufeng19988.github.io/zyf/posts/rust/rust%E5%85%A5%E9%97%A8/20-.html"}],["meta",{"property":"og:title","content":"20.web服务器"}],["meta",{"property":"og:description","content":"20.1 单线程Web服务器 构建Web服务器 在socket上监听TCP连接 解析少量的HTTP请求 HTTP请求建立在TCP之上，描述了请求和响应的内容 创建一个合适的HTTP响应 使用线程池来改进服务器的吞吐量 use std::fs; use std::io::{Read, Write}; use std::net::{TcpListener, TcpStream}; fn main() { let listener = TcpListener::bind(\\"127.0.0.1:7878\\").unwrap(); for stream in listener.incoming() { let stream = stream.unwrap(); handle_connect(stream); } } fn handle_connect(mut stream: TcpStream) { let mut buffer = [0; 1024]; // println!(\\"{:?}\\",stream); stream.read(&amp;mut buffer).unwrap(); // println!(\\"Request {} \\",String::from_utf8_lossy(&amp;buffer[..])); // 请求 // Method Request-URI HTTP-Version CRLF // headers CRLF // message-body // 响应 // Http-Version Status-Code Reason-Phrase CRLF // headers CRLF // message-body let get = b\\"GET / HTTP/1.1\\\\r\\\\n\\"; let (status_line,filename) = if buffer.starts_with(get){ (\\"HTTP/1.1 200 OK\\\\r\\\\n\\\\r\\\\n\\",\\"hello.html\\") } else { (\\"HTTP/1.1 404 NOT FOUND\\\\r\\\\n\\\\r\\\\n\\",\\"404.html\\") }; let contents = fs::read_to_string(filename ).unwrap(); let response = format!(\\"{}{}\\",status_line,contents); stream.write(response.as_bytes()).expect(\\"~\\"); stream.flush().unwrap(); // 等待并阻止程序的运行，直到所有字节写入完成 println!(\\"yes!\\"); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"ZYF"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"20.web服务器\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ZYF\\",\\"url\\":\\"https://zhangyufeng19989.github.io\\",\\"email\\":\\"907392790@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"20.1 单线程Web服务器","slug":"_20-1-单线程web服务器","link":"#_20-1-单线程web服务器","children":[{"level":3,"title":"构建Web服务器","slug":"构建web服务器","link":"#构建web服务器","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.81,"words":243},"filePathRelative":"posts/rust/rust入门/20-.md","excerpt":"<h2> 20.1 单线程Web服务器</h2>\\n<h3> 构建Web服务器</h3>\\n<ul>\\n<li>在socket上监听TCP连接</li>\\n<li>解析少量的HTTP请求\\n<ul>\\n<li>HTTP请求建立在TCP之上，描述了请求和响应的内容</li>\\n</ul>\\n</li>\\n<li>创建一个合适的HTTP响应</li>\\n<li>使用线程池来改进服务器的吞吐量</li>\\n</ul>\\n<div class=\\"language-rust line-numbers-mode\\" data-ext=\\"rs\\"><pre class=\\"language-rust\\"><code><span class=\\"token keyword\\">use</span> <span class=\\"token namespace\\">std<span class=\\"token punctuation\\">::</span></span>fs<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">use</span> <span class=\\"token namespace\\">std<span class=\\"token punctuation\\">::</span>io<span class=\\"token punctuation\\">::</span></span><span class=\\"token punctuation\\">{</span><span class=\\"token class-name\\">Read</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Write</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">use</span> <span class=\\"token namespace\\">std<span class=\\"token punctuation\\">::</span>net<span class=\\"token punctuation\\">::</span></span><span class=\\"token punctuation\\">{</span><span class=\\"token class-name\\">TcpListener</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">TcpStream</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">fn</span> <span class=\\"token function-definition function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">let</span> listener <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">TcpListener</span><span class=\\"token punctuation\\">::</span><span class=\\"token function\\">bind</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"127.0.0.1:7878\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">unwrap</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span> stream <span class=\\"token keyword\\">in</span> listener<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">incoming</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">let</span> stream <span class=\\"token operator\\">=</span> stream<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">unwrap</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token function\\">handle_connect</span><span class=\\"token punctuation\\">(</span>stream<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">fn</span> <span class=\\"token function-definition function\\">handle_connect</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">mut</span> stream<span class=\\"token punctuation\\">:</span> <span class=\\"token class-name\\">TcpStream</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">let</span> <span class=\\"token keyword\\">mut</span> buffer <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> <span class=\\"token number\\">1024</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// println!(\\"{:?}\\",stream);</span>\\n    stream<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">read</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span><span class=\\"token keyword\\">mut</span> buffer<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">unwrap</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// println!(\\"Request {} \\",String::from_utf8_lossy(&amp;buffer[..]));</span>\\n\\n    <span class=\\"token comment\\">// 请求</span>\\n    <span class=\\"token comment\\">// Method Request-URI HTTP-Version CRLF</span>\\n    <span class=\\"token comment\\">// headers CRLF</span>\\n    <span class=\\"token comment\\">// message-body</span>\\n\\n    <span class=\\"token comment\\">// 响应</span>\\n    <span class=\\"token comment\\">// Http-Version Status-Code Reason-Phrase CRLF</span>\\n    <span class=\\"token comment\\">// headers CRLF</span>\\n    <span class=\\"token comment\\">// message-body</span>\\n\\n    <span class=\\"token keyword\\">let</span> get <span class=\\"token operator\\">=</span> <span class=\\"token string\\">b\\"GET / HTTP/1.1\\\\r\\\\n\\"</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">let</span> <span class=\\"token punctuation\\">(</span>status_line<span class=\\"token punctuation\\">,</span>filename<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">if</span> buffer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">starts_with</span><span class=\\"token punctuation\\">(</span>get<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"HTTP/1.1 200 OK\\\\r\\\\n\\\\r\\\\n\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">\\"hello.html\\"</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"HTTP/1.1 404 NOT FOUND\\\\r\\\\n\\\\r\\\\n\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">\\"404.html\\"</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n    <span class=\\"token keyword\\">let</span> contents <span class=\\"token operator\\">=</span> <span class=\\"token namespace\\">fs<span class=\\"token punctuation\\">::</span></span><span class=\\"token function\\">read_to_string</span><span class=\\"token punctuation\\">(</span>filename <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">unwrap</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">let</span> response <span class=\\"token operator\\">=</span> <span class=\\"token macro property\\">format!</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"{}{}\\"</span><span class=\\"token punctuation\\">,</span>status_line<span class=\\"token punctuation\\">,</span>contents<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    stream<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">write</span><span class=\\"token punctuation\\">(</span>response<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">as_bytes</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"~\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    stream<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">flush</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">unwrap</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 等待并阻止程序的运行，直到所有字节写入完成</span>\\n\\n    <span class=\\"token macro property\\">println!</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"yes!\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
