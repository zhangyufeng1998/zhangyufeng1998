const t=JSON.parse('{"key":"v-731c5478","path":"/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/Dijkstra.html","title":"Dijkstra","lang":"zh-CN","frontmatter":{"title":"Dijkstra","description":"常见的最短路问题 单源最短路 一个点到其他点的最短距离 第一类：所有边权都是正数 朴素dijkstra算法 时间复杂度（n^2 n为图中点的数量m表示边的数量）适合稠密图 堆优化dijkstra算法 时间复杂度为（mlogn） 第二类：存在负权边 bellman-ford 时间复杂度（nm） spfa 对bellman-ford进行优化 一边情况下O（m）最坏情况O（nm） 限制经过的边数小于等于k的情况不能使用 多源汇最短路 源点就是起点 汇点就是终点 floyd算法O（n^3）","head":[["meta",{"property":"og:url","content":"https://zhangyufeng19988.github.io/zyf/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/Dijkstra.html"}],["meta",{"property":"og:title","content":"Dijkstra"}],["meta",{"property":"og:description","content":"常见的最短路问题 单源最短路 一个点到其他点的最短距离 第一类：所有边权都是正数 朴素dijkstra算法 时间复杂度（n^2 n为图中点的数量m表示边的数量）适合稠密图 堆优化dijkstra算法 时间复杂度为（mlogn） 第二类：存在负权边 bellman-ford 时间复杂度（nm） spfa 对bellman-ford进行优化 一边情况下O（m）最坏情况O（nm） 限制经过的边数小于等于k的情况不能使用 多源汇最短路 源点就是起点 汇点就是终点 floyd算法O（n^3）"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"ZYF"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Dijkstra\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ZYF\\",\\"url\\":\\"https://zhangyufeng19989.github.io\\",\\"email\\":\\"907392790@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"常见的最短路问题","slug":"常见的最短路问题","link":"#常见的最短路问题","children":[]},{"level":2,"title":"朴素Dijkstra","slug":"朴素dijkstra","link":"#朴素dijkstra","children":[]},{"level":2,"title":"堆优化Dijkstra","slug":"堆优化dijkstra","link":"#堆优化dijkstra","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.9,"words":270},"filePathRelative":"posts/算法基础/搜索与图论/Dijkstra.md","excerpt":"<h2> 常见的最短路问题</h2>\\n<ol>\\n<li>单源最短路\\n<ul>\\n<li>一个点到其他点的最短距离</li>\\n<li>第一类：所有边权都是正数\\n<ul>\\n<li>朴素dijkstra算法 时间复杂度（n^2 n为图中点的数量m表示边的数量）适合稠密图</li>\\n<li>堆优化dijkstra算法 时间复杂度为（mlogn）</li>\\n</ul>\\n</li>\\n<li>第二类：存在负权边\\n<ul>\\n<li>bellman-ford 时间复杂度（nm）</li>\\n<li>spfa 对bellman-ford进行优化 一边情况下O（m）最坏情况O（nm）\\n<ul>\\n<li>限制经过的边数小于等于k的情况不能使用</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>多源汇最短路\\n<ul>\\n<li>源点就是起点</li>\\n<li>汇点就是终点</li>\\n<li>floyd算法O（n^3）</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}');export{t as data};
