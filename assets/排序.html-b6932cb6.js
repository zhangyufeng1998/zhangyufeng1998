const n=JSON.parse('{"key":"v-649e53b1","path":"/posts/%E5%89%91%E6%8C%87offer/%E6%8E%92%E5%BA%8F.html","title":"","lang":"zh-CN","frontmatter":{"description":"快速排序 package com.zyf; import java.util.Random; class Main { public static void main(String[] arsg) { int[] a = new int[]{1, 4, 8, 100, 5, 7, 30, 88, 1010, 22}; int[] result = sortArray(a); for (int i : result) { System.out.println(i); } } public static int[] sortArray(int[] nums) { quicksort(nums, 0, nums.length - 1); return nums; } public static void quicksort(int[] nums, int start, int end) { if (end &gt; start) { // 递归终止条件 end &gt; start 而不是 end &gt;= start 是因为 partition 方法中 end 位置的元素是作为基准元素的，所以不需要再参与排序 int pivot = partition(nums, start, end); quicksort(nums, start, pivot - 1); quicksort(nums, pivot + 1, end); } } private static int partition(int[] nums, int start, int end) { int random = new Random().nextInt(end - start + 1) + start; // 随机选取一个元素作为基准元素 // 为什么要加 1？因为 nextInt 方法返回的是 [0, bound) 之间的随机数，所以要加 1 使得返回的随机数在 [start, end] 之间 swap(nums, random, end); int small = start - 1; // small 相当于指针p1，指向小于基准元素的最后一个元素 for (int i = start; i &lt; end; ++i) { // i 相当于指针p2，指向当前遍历到的元素 if (nums[i] &lt; nums[end]) { small++; swap(nums, i, small); } } small++; swap(nums, small, end); return small; } private static void swap(int[] nums, int index1, int index2) { // 交换数组中的两个元素 if (index1 != index2) { // 为什么要加这个判断？因为如果 index1 == index2，那么交换后的结果还是原来的结果，所以没有必要交换 int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; } } }","head":[["meta",{"property":"og:url","content":"https://zhangyufeng19988.github.io/zyf/posts/%E5%89%91%E6%8C%87offer/%E6%8E%92%E5%BA%8F.html"}],["meta",{"property":"og:description","content":"快速排序 package com.zyf; import java.util.Random; class Main { public static void main(String[] arsg) { int[] a = new int[]{1, 4, 8, 100, 5, 7, 30, 88, 1010, 22}; int[] result = sortArray(a); for (int i : result) { System.out.println(i); } } public static int[] sortArray(int[] nums) { quicksort(nums, 0, nums.length - 1); return nums; } public static void quicksort(int[] nums, int start, int end) { if (end &gt; start) { // 递归终止条件 end &gt; start 而不是 end &gt;= start 是因为 partition 方法中 end 位置的元素是作为基准元素的，所以不需要再参与排序 int pivot = partition(nums, start, end); quicksort(nums, start, pivot - 1); quicksort(nums, pivot + 1, end); } } private static int partition(int[] nums, int start, int end) { int random = new Random().nextInt(end - start + 1) + start; // 随机选取一个元素作为基准元素 // 为什么要加 1？因为 nextInt 方法返回的是 [0, bound) 之间的随机数，所以要加 1 使得返回的随机数在 [start, end] 之间 swap(nums, random, end); int small = start - 1; // small 相当于指针p1，指向小于基准元素的最后一个元素 for (int i = start; i &lt; end; ++i) { // i 相当于指针p2，指向当前遍历到的元素 if (nums[i] &lt; nums[end]) { small++; swap(nums, i, small); } } small++; swap(nums, small, end); return small; } private static void swap(int[] nums, int index1, int index2) { // 交换数组中的两个元素 if (index1 != index2) { // 为什么要加这个判断？因为如果 index1 == index2，那么交换后的结果还是原来的结果，所以没有必要交换 int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; } } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"ZYF"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ZYF\\",\\"url\\":\\"https://zhangyufeng19989.github.io\\",\\"email\\":\\"907392790@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"快速排序","slug":"快速排序","link":"#快速排序","children":[{"level":3,"title":"数组中第k大的数字","slug":"数组中第k大的数字","link":"#数组中第k大的数字","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.11,"words":633},"filePathRelative":"posts/剑指offer/排序.md","excerpt":"<h2> 快速排序</h2>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">package</span> <span class=\\"token namespace\\">com<span class=\\"token punctuation\\">.</span>zyf</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Random</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Main</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> arsg<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> a <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">8</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">100</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">7</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">30</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">88</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1010</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">22</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> result <span class=\\"token operator\\">=</span> <span class=\\"token function\\">sortArray</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">:</span> result<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token function\\">sortArray</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> nums<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">quicksort</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> nums<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> nums<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">quicksort</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> nums<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> start<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> end<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>end <span class=\\"token operator\\">&gt;</span> start<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>  <span class=\\"token comment\\">// 递归终止条件 end &gt; start 而不是 end &gt;= start 是因为 partition 方法中 end 位置的元素是作为基准元素的，所以不需要再参与排序</span>\\n            <span class=\\"token keyword\\">int</span> pivot <span class=\\"token operator\\">=</span> <span class=\\"token function\\">partition</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">,</span> start<span class=\\"token punctuation\\">,</span> end<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token function\\">quicksort</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">,</span> start<span class=\\"token punctuation\\">,</span> pivot <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token function\\">quicksort</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">,</span> pivot <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> end<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">partition</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> nums<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> start<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> end<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\n        <span class=\\"token keyword\\">int</span> random <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Random</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">nextInt</span><span class=\\"token punctuation\\">(</span>end <span class=\\"token operator\\">-</span> start <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> start<span class=\\"token punctuation\\">;</span>   <span class=\\"token comment\\">// 随机选取一个元素作为基准元素 // 为什么要加 1？因为 nextInt 方法返回的是 [0, bound) 之间的随机数，所以要加 1 使得返回的随机数在 [start, end] 之间</span>\\n        <span class=\\"token function\\">swap</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">,</span> random<span class=\\"token punctuation\\">,</span> end<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> small <span class=\\"token operator\\">=</span> start <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// small 相当于指针p1，指向小于基准元素的最后一个元素</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> start<span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> end<span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>i<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">// i 相当于指针p2，指向当前遍历到的元素</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&lt;</span> nums<span class=\\"token punctuation\\">[</span>end<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                small<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token function\\">swap</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">,</span> i<span class=\\"token punctuation\\">,</span> small<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        small<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">swap</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">,</span> small<span class=\\"token punctuation\\">,</span> end<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> small<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">swap</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> nums<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> index1<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> index2<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">// 交换数组中的两个元素</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>index1 <span class=\\"token operator\\">!=</span> index2<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">// 为什么要加这个判断？因为如果 index1 == index2，那么交换后的结果还是原来的结果，所以没有必要交换</span>\\n            <span class=\\"token keyword\\">int</span> temp <span class=\\"token operator\\">=</span> nums<span class=\\"token punctuation\\">[</span>index1<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n            nums<span class=\\"token punctuation\\">[</span>index1<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> nums<span class=\\"token punctuation\\">[</span>index2<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n            nums<span class=\\"token punctuation\\">[</span>index2<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> temp<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
