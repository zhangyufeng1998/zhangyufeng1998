const e=JSON.parse('{"key":"v-6fdcbc2c","path":"/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%AD%A6%E9%80%8FSpring/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9ASpring%20Framework%E4%B8%AD%E7%9A%84AOP.html","title":"第三章：Spring Framework中的AOP","lang":"zh-CN","frontmatter":{"title":"第三章：Spring Framework中的AOP","desctiption":"Spring","date":"2023-05-08T00:00:00.000Z","icon":"java","category":["读书笔记","Java","Spring","学透Spring"],"description":"3.1 Spring中的AOP AOP（Aspect Oriented Programming）面向切面编程，是一种变成范式，目的是通过分离横切关注点来提升代码的模块化程度。 关注点就是一段特定的功能，有些关注点出现在多个模块中，就被成为横切关注点。 提示 一个后台和服系统的每个模块都需要记录客服的操作日志这就是一个能从业务逻辑中分离出来的横切关注点，完全不用交织在每个模块的代码中，可以作为一个单独的模块存在。","head":[["meta",{"property":"og:url","content":"https://zhangyufeng19988.github.io/zyf/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%AD%A6%E9%80%8FSpring/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9ASpring%20Framework%E4%B8%AD%E7%9A%84AOP.html"}],["meta",{"property":"og:title","content":"第三章：Spring Framework中的AOP"}],["meta",{"property":"og:description","content":"3.1 Spring中的AOP AOP（Aspect Oriented Programming）面向切面编程，是一种变成范式，目的是通过分离横切关注点来提升代码的模块化程度。 关注点就是一段特定的功能，有些关注点出现在多个模块中，就被成为横切关注点。 提示 一个后台和服系统的每个模块都需要记录客服的操作日志这就是一个能从业务逻辑中分离出来的横切关注点，完全不用交织在每个模块的代码中，可以作为一个单独的模块存在。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-22T03:59:03.000Z"}],["meta",{"property":"article:author","content":"ZYF"}],["meta",{"property":"article:published_time","content":"2023-05-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-22T03:59:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第三章：Spring Framework中的AOP\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-08T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-22T03:59:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ZYF\\",\\"url\\":\\"https://zhangyufeng19989.github.io\\",\\"email\\":\\"907392790@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"3.1 Spring中的AOP","slug":"_3-1-spring中的aop","link":"#_3-1-spring中的aop","children":[]},{"level":2,"title":"3.2 基于@AspectJ的配置","slug":"_3-2-基于-aspectj的配置","link":"#_3-2-基于-aspectj的配置","children":[]},{"level":2,"title":"3.3 基于XML Schema的配置","slug":"_3-3-基于xml-schema的配置","link":"#_3-3-基于xml-schema的配置","children":[]}],"git":{"createdTime":1684727943000,"updatedTime":1684727943000,"contributors":[{"name":"zyf","email":"907392790@qq.com","commits":1}]},"readingTime":{"minutes":1.04,"words":313},"filePathRelative":"posts/读书笔记/学透Spring/第三章：Spring Framework中的AOP.md","localizedDate":"2023年5月8日","excerpt":"<h2> 3.1 Spring中的AOP</h2>\\n<p>AOP（Aspect Oriented Programming）面向切面编程，是一种变成范式，目的是通过分离横切关注点来提升代码的模块化程度。</p>\\n<p><mark>关注点</mark>就是<mark>一段特定的功能</mark>，有些关注点出现在多个模块中，就被成为<mark>横切关注点</mark>。</p>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>一个后台和服系统的每个模块都需要记录客服的操作日志这就是一个能从业务逻辑中分离出来的横切关注点，完全不用交织在每个模块的代码中，可以作为一个单独的模块存在。</p>\\n</div>","autoDesc":true}');export{e as data};
