import{_ as n,X as s,Y as a,a2 as t}from"./framework-a8949fcd.js";const p={},e=t(`<h2 id="并发" tabindex="-1"><a class="header-anchor" href="#并发" aria-hidden="true">#</a> 并发</h2><ul><li>Concurrent：程序不同部分之间<strong>独立的执行</strong></li><li>Parallel：程序的不同部分<strong>同时进行</strong></li><li>Rust无畏并发：允许你编写没有细微Bug的代码，并在不引入新Bug的情况下易于重构</li></ul><h2 id="_16-1-使用线程同时运行代码" tabindex="-1"><a class="header-anchor" href="#_16-1-使用线程同时运行代码" aria-hidden="true">#</a> 16.1 使用线程同时运行代码</h2><h3 id="进程与线程" tabindex="-1"><a class="header-anchor" href="#进程与线程" aria-hidden="true">#</a> 进程与线程</h3><ul><li>在大部分OS里，代码运行在**进程（process）**中，OS同时管理多个进程</li><li>在你的程序里，各独立部分可以同时运行，运行这些独立部分的就是<strong>线程（thread）</strong></li><li>多线程运行 <ul><li>提升性能表现</li><li>增加复杂性：无法保障各线程的执行顺序</li></ul></li></ul><h3 id="多线程可导致的问题" tabindex="-1"><a class="header-anchor" href="#多线程可导致的问题" aria-hidden="true">#</a> 多线程可导致的问题</h3><ul><li>竞争状态：线程以不一致的顺序访问数据或资源</li><li>死锁：两个线程彼此等待对方使用完所持有的资源，线程无法继续</li><li>只在某些状况下发生的Bug，很呐可靠地复制现象和修复</li></ul><h3 id="实现线程的方式" tabindex="-1"><a class="header-anchor" href="#实现线程的方式" aria-hidden="true">#</a> 实现线程的方式</h3><ul><li>通过调用OS的API来创建线程：1比1模型（一个操作系统的线程对应一个语言的线程） <ul><li>需要较小的运行时</li></ul></li><li>语言自己实现的线程（绿色线程）：M比N <ul><li>需要比较大的运行时</li></ul></li><li>Rust需要权衡运行时的支持</li><li>Rust标准库仅提供1：1模型的线程</li></ul><h3 id="通过spawn创建新的线程" tabindex="-1"><a class="header-anchor" href="#通过spawn创建新的线程" aria-hidden="true">#</a> 通过spawn创建新的线程</h3><ul><li>通过thread::spawn函数可以创建新线程 <ul><li>参数：一个闭包（在新线程里运行的代码）</li></ul></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>
    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..</span>a <span class="token punctuation">{</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;the one {i}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span><span class="token punctuation">{</span>
       <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..</span><span class="token number">20</span><span class="token punctuation">{</span>
           <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{i}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{a}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 主线程结束以后，不管其他线程是否结束都会结束程序</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通过join-handle来等待所有现成的完成" tabindex="-1"><a class="header-anchor" href="#通过join-handle来等待所有现成的完成" aria-hidden="true">#</a> 通过join Handle来等待所有现成的完成</h3><ul><li>thread::spawn 函数的返回值类型时joinHandle</li><li>joinHandle持有值的所有权 <ul><li>调用其join方法，就可以等待对应的其他线程的完成</li></ul></li><li>join方法：调用handle的join方法会组织当前运行线程的执行，知道handle所表示的这些线程终结</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> handle <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..</span>a <span class="token punctuation">{</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;the one {i}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..</span><span class="token number">20</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{i}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    handle<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 会阻塞当前线程的执行，直到handle对应的线程执行完毕才往下走</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用move闭包" tabindex="-1"><a class="header-anchor" href="#使用move闭包" aria-hidden="true">#</a> 使用move闭包</h3><ul><li>move闭包通常和thread::spawn函数一起使用，它允许你使用其他线程的数据</li><li>创建线程时把值的所有权从一个线程转移到另一个线程里</li></ul><h2 id="_16-2-使用消息传递来跨线程传递数据" tabindex="-1"><a class="header-anchor" href="#_16-2-使用消息传递来跨线程传递数据" aria-hidden="true">#</a> 16.2 使用消息传递来跨线程传递数据</h2><ul><li>一种很流行且能保证安全并发的技术就是：<strong>消息传递</strong></li><li>线程（或Actor）通过彼此发送消息（数据）来进行通信</li><li>Go语言的名言：不要共享内存来通信，要用通信来共享内存</li><li>Rust：channel（标准库提供）</li></ul><h3 id="channel" tabindex="-1"><a class="header-anchor" href="#channel" aria-hidden="true">#</a> Channel</h3><ul><li>Channel包含发送端、接收端</li><li>如果发送端、接收端中任意一端被丢弃了，那么Channel就被关闭了</li></ul><h3 id="创建channel" tabindex="-1"><a class="header-anchor" href="#创建channel" aria-hidden="true">#</a> 创建Channel</h3><ul><li>使用mpsc::channel函数来创建channel <ul><li>mcsp代表:mutiple producer single consumer（多个生产者，一个消费之）</li><li>（多个发送端，一个接收端）</li><li>返回一个tuple元组：里面分别是发送端、接收端</li></ul></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span>mpsc<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">(</span>tx<span class="token punctuation">,</span>rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> received <span class="token operator">=</span> rx<span class="token punctuation">.</span><span class="token function">recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 线程会堵塞住，直到收到消息</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Got:{received}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="发送端的send方法" tabindex="-1"><a class="header-anchor" href="#发送端的send方法" aria-hidden="true">#</a> 发送端的send方法</h3><ul><li>参数：想要发送的数据</li><li>返回：<code>Result&lt;T,E&gt;</code><ul><li>如果有问题（例如接收端已经被丢弃），就返回一个错误</li></ul></li></ul><h3 id="接收端的方法" tabindex="-1"><a class="header-anchor" href="#接收端的方法" aria-hidden="true">#</a> 接收端的方法</h3><ul><li>recv方法，阻止当前线程执行，知道Channel中有值被传进来 <ul><li>一旦有值被接受到，就返回<code>Result&lt;T,E&gt;</code></li><li>当发送端关闭，就会收到一个错误</li></ul></li><li>try_recv方法：不会阻塞 <ul><li>立即返回一个<code>Result&lt;T,E&gt;</code><ul><li>如果有数据到达就返回ok，里面包含着数据</li><li>否则就返回错误</li></ul></li><li>通常会循环调用来检查try_recv</li></ul></li></ul><h3 id="channel和所有权转移" tabindex="-1"><a class="header-anchor" href="#channel和所有权转移" aria-hidden="true">#</a> channel和所有权转移</h3><ul><li>所有权在消息传递中非常重要：能帮你编写安全并发的代码</li></ul><h3 id="发送多个值" tabindex="-1"><a class="header-anchor" href="#发送多个值" aria-hidden="true">#</a> 发送多个值</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span>mpsc<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">(</span>tx<span class="token punctuation">,</span> rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> vals <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>
            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;z&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;y&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;f&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> val <span class="token keyword">in</span> vals <span class="token punctuation">{</span>
            tx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> received <span class="token keyword">in</span> rx <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{received}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token comment">// 当channel关闭以后就会退出这个循环</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通过克隆创建多个发送者" tabindex="-1"><a class="header-anchor" href="#通过克隆创建多个发送者" aria-hidden="true">#</a> 通过克隆创建多个发送者</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span>mpsc<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">(</span>tx<span class="token punctuation">,</span> rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> tx1 <span class="token operator">=</span> <span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token class-name">Sender</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tx<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> vals <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>
            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;z&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;y&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;f&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> val <span class="token keyword">in</span> vals <span class="token punctuation">{</span>
            tx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> vals <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>
            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;s&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> val <span class="token keyword">in</span> vals <span class="token punctuation">{</span>
            tx1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> received <span class="token keyword">in</span> rx <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{received}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_16-3-共享状态的并发" tabindex="-1"><a class="header-anchor" href="#_16-3-共享状态的并发" aria-hidden="true">#</a> 16.3 共享状态的并发</h2><h3 id="使用共享来实现并发" tabindex="-1"><a class="header-anchor" href="#使用共享来实现并发" aria-hidden="true">#</a> 使用共享来实现并发</h3><ul><li>不要用共享内存来通信，要用通信来共享内存</li><li>Rust支持通过共享状态来实现并发</li><li>channel类似单所有权：一旦将值的所有权转移至Channel，就无法使用它了</li><li>共享内存并发类似于多所有权：多个线程可以同时访问同一块内存</li></ul><h3 id="使用mutex来每次只允许一个线程来访问数据" tabindex="-1"><a class="header-anchor" href="#使用mutex来每次只允许一个线程来访问数据" aria-hidden="true">#</a> 使用Mutex来每次只允许一个线程来访问数据</h3><ul><li>Mutex时mutual exclusion（互斥锁）的简写</li><li>在同一时刻，Mutex只允许一个线程来访问某些数据</li><li>想要访问数据： <ul><li>线程必须首先获得互斥锁（lock） <ul><li>lock数据结构是mutex的一部分，它能跟踪谁对数据拥有独占访问权</li></ul></li><li>mutex通常被描述为：通过锁定系统来保护它所持有的数据</li></ul></li></ul><h3 id="mutex的两条规则" tabindex="-1"><a class="header-anchor" href="#mutex的两条规则" aria-hidden="true">#</a> Mutex的两条规则</h3><ul><li>在使用数据之前，必须尝试获取锁（lock）</li><li>使用完mutex所保护的数据，必须对数据进行解锁，以便其他线程可以获取锁</li></ul><h3 id="mutex-t-的api" tabindex="-1"><a class="header-anchor" href="#mutex-t-的api" aria-hidden="true">#</a> <code>Mutex&lt;T&gt;</code>的API</h3><ul><li>通过Mutex::new（保护的数据）来创建<code>Mutex&lt;T&gt;</code><ul><li><code>Mutex&lt;T&gt;</code>是一个智能指针</li></ul></li><li>访问数据之前，通过lock方法来获取锁 <ul><li>会阻塞当前线程的执行</li><li>lock可能会失败</li><li>返回的是MutexGuard（智能指针，实现了Deref和Drop）</li></ul></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span><span class="token class-name">Mutex</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token class-name">Mutex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> num <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">*</span>num <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
        <span class="token comment">// 因为实现了drop方法，离开作用域自动解锁</span>
    <span class="token punctuation">}</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多线程共享mutex-t" tabindex="-1"><a class="header-anchor" href="#多线程共享mutex-t" aria-hidden="true">#</a> 多线程共享<code>Mutex&lt;T&gt;</code></h3><h3 id="使用arc-t-来进行原子引用计数" tabindex="-1"><a class="header-anchor" href="#使用arc-t-来进行原子引用计数" aria-hidden="true">#</a> 使用<code>Arc&lt;T&gt;</code>来进行原子引用计数</h3><ul><li>Arc和Rc类似，它可以用于并发场景 <ul><li>A：atomic，原子的</li></ul></li><li>为什么所有的基础类型都不是原子的？为什么标准库类型不默认使用Arc？ <ul><li>需要性能作为代价</li></ul></li><li>Arc和rc的Api是相同的</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Mutex</span><span class="token punctuation">,</span> <span class="token class-name">Arc</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span>


<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Mutex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> handles <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span><span class="token number">10</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> handle <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> num <span class="token operator">=</span> counter<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">*</span>num <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        handles<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> handle <span class="token keyword">in</span> handles <span class="token punctuation">{</span>
        handle<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Result: {}&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>counter<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="refcell和rc对比mutex和arc" tabindex="-1"><a class="header-anchor" href="#refcell和rc对比mutex和arc" aria-hidden="true">#</a> RefCell和Rc对比Mutex和Arc</h3><ul><li>Mutex提供了内部可变性和Cell家族一样</li><li>我们可以使用RefCell来改变Rc里面的内容</li><li>我们可以使用Mutex来改变Arc里面的内容</li><li>注意：<strong>Mutex有死锁的风险</strong><ul><li>某个操作需要同时锁住两个资源，两个线程分别持有其中一个锁，并相互请求另外一个所，就会陷入死锁</li></ul></li></ul><h2 id="_16-4-通过send和sync-trait来扩展并发" tabindex="-1"><a class="header-anchor" href="#_16-4-通过send和sync-trait来扩展并发" aria-hidden="true">#</a> 16.4 通过Send和Sync Trait来扩展并发</h2><h3 id="send和sync-trait" tabindex="-1"><a class="header-anchor" href="#send和sync-trait" aria-hidden="true">#</a> Send和Sync trait</h3><ul><li>Rust语言的并发特性比较少，以上例子并发特性都来自标准库</li><li>无需局限于标准库的并发，可以自己实现并发</li><li>在Rust语言中有两个并发概念 <ul><li><code>std::marker::Sync</code>and<code>std::marker::Send</code> this two trait</li><li>这两个是标签trait因为没有定义任何方法</li></ul></li></ul><h3 id="send允许线程间转移所有权" tabindex="-1"><a class="header-anchor" href="#send允许线程间转移所有权" aria-hidden="true">#</a> Send允许线程间转移所有权</h3><ul><li>实现Send trait的类型可以在线程之间转移所有权</li><li>Rsut中几乎所有的类型都实现了Send <ul><li>但是<code>Rc&lt;T&gt;</code>没有实现Send，它只适用于单线程情景</li></ul></li><li>任何完全由Send类型组成的类型也被标记为Send</li><li>除了原始指针之外，几乎所有的基础类型都是Send</li></ul><h3 id="sync-允许从多线程访问" tabindex="-1"><a class="header-anchor" href="#sync-允许从多线程访问" aria-hidden="true">#</a> Sync 允许从多线程访问</h3><ul><li>实现Sync的类型可以安全的被多个线程引用</li><li>也就是说：如果T是Sync，那么&amp;T就是Send <ul><li>引用可以被安全的送往另一个线程</li></ul></li><li>基础类型都是Sync</li><li>完全由Sync类型组成的类型也是Sync <ul><li>单，<code>Rc&lt;T&gt;</code>不是Sync的</li><li><code>RefCell&lt;T&gt;</code> and <code>Cell&lt;T&gt;</code> 家族也不是Sync的</li><li>而，<code>Mutex&lt;T&gt;</code> 是 Sync 的</li></ul></li></ul><h3 id="手动实现send和sync是不安全的" tabindex="-1"><a class="header-anchor" href="#手动实现send和sync是不安全的" aria-hidden="true">#</a> 手动实现Send和Sync是不安全的</h3>`,58),c=[e];function o(l,i){return s(),a("div",null,c)}const k=n(p,[["render",o],["__file","16-.html.vue"]]);export{k as default};
