const n=JSON.parse('{"key":"v-a13998fe","path":"/posts/rust/rust%E5%85%A5%E9%97%A8/17-.html","title":"17.Rust的面向对象特性","lang":"zh-CN","frontmatter":{"title":"17.Rust的面向对象特性","date":"2023-05-25T00:00:00.000Z","icon":"rust","category":"rust","description":"17.1 面向对象语言的特性 Rust是面向对象的语言么？ Rust受到多种编程范式的影响，包括面向对象 面向对象通常包括以下特性：命名对象、封装、继承 对象包含数据和行为 struct、enum包含数据 impl块为之提供了方法 但带有方法的struct、enum并没有被称为对象 pub struct AveragedCollection { list: Vec&lt;i32&gt;, average: f64, // 结构体是共有的，里面的字段是私有的，访问和修改里面的数据使用下面的pub方法 } impl AveragedCollection { pub fn new() -&gt; AveragedCollection { AveragedCollection { list: vec![], average: 0.0, } } pub fn add(&amp;mut self, value: i32) { self.list.push(value); self.update_average(); } pub fn remove(&amp;mut self) -&gt; Option&lt;i32&gt; { let result = self.list.pop(); match result { Some(value) =&gt; { self.update_average(); Some(value) } None =&gt; None, } } pub fn average(&amp;self) -&gt; f64 { self.average } fn update_average(&amp;mut self) { let total: i32 = self.list.iter().sum(); self.average = total as f64 / self.list.len() as f64; } }","head":[["meta",{"property":"og:url","content":"https://zhangyufeng19988.github.io/zyf/posts/rust/rust%E5%85%A5%E9%97%A8/17-.html"}],["meta",{"property":"og:title","content":"17.Rust的面向对象特性"}],["meta",{"property":"og:description","content":"17.1 面向对象语言的特性 Rust是面向对象的语言么？ Rust受到多种编程范式的影响，包括面向对象 面向对象通常包括以下特性：命名对象、封装、继承 对象包含数据和行为 struct、enum包含数据 impl块为之提供了方法 但带有方法的struct、enum并没有被称为对象 pub struct AveragedCollection { list: Vec&lt;i32&gt;, average: f64, // 结构体是共有的，里面的字段是私有的，访问和修改里面的数据使用下面的pub方法 } impl AveragedCollection { pub fn new() -&gt; AveragedCollection { AveragedCollection { list: vec![], average: 0.0, } } pub fn add(&amp;mut self, value: i32) { self.list.push(value); self.update_average(); } pub fn remove(&amp;mut self) -&gt; Option&lt;i32&gt; { let result = self.list.pop(); match result { Some(value) =&gt; { self.update_average(); Some(value) } None =&gt; None, } } pub fn average(&amp;self) -&gt; f64 { self.average } fn update_average(&amp;mut self) { let total: i32 = self.list.iter().sum(); self.average = total as f64 / self.list.len() as f64; } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"ZYF"}],["meta",{"property":"article:published_time","content":"2023-05-25T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"17.Rust的面向对象特性\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ZYF\\",\\"url\\":\\"https://zhangyufeng19989.github.io\\",\\"email\\":\\"907392790@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"17.1 面向对象语言的特性","slug":"_17-1-面向对象语言的特性","link":"#_17-1-面向对象语言的特性","children":[{"level":3,"title":"Rust是面向对象的语言么？","slug":"rust是面向对象的语言么","link":"#rust是面向对象的语言么","children":[]},{"level":3,"title":"对象包含数据和行为","slug":"对象包含数据和行为","link":"#对象包含数据和行为","children":[]},{"level":3,"title":"继承","slug":"继承","link":"#继承","children":[]}]},{"level":2,"title":"17.2 使用trait对象来存储不同类型的值","slug":"_17-2-使用trait对象来存储不同类型的值","link":"#_17-2-使用trait对象来存储不同类型的值","children":[{"level":3,"title":"对共有行为定义一个trait","slug":"对共有行为定义一个trait","link":"#对共有行为定义一个trait","children":[]},{"level":3,"title":"Trait对象执行的是动态派发","slug":"trait对象执行的是动态派发","link":"#trait对象执行的是动态派发","children":[]},{"level":3,"title":"Trait对象必须保证对象安全","slug":"trait对象必须保证对象安全","link":"#trait对象必须保证对象安全","children":[]}]},{"level":2,"title":"17.3 实现面向对象的设计模式","slug":"_17-3-实现面向对象的设计模式","link":"#_17-3-实现面向对象的设计模式","children":[{"level":3,"title":"状态模式","slug":"状态模式","link":"#状态模式","children":[]},{"level":3,"title":"状态模式的取舍权衡","slug":"状态模式的取舍权衡","link":"#状态模式的取舍权衡","children":[]},{"level":3,"title":"将状态和行为编码为类型","slug":"将状态和行为编码为类型","link":"#将状态和行为编码为类型","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.81,"words":1142},"filePathRelative":"posts/rust/rust入门/17-.md","localizedDate":"2023年5月25日","excerpt":"<h2> 17.1 面向对象语言的特性</h2>\\n<h3> Rust是面向对象的语言么？</h3>\\n<ul>\\n<li>Rust受到多种编程范式的影响，包括面向对象</li>\\n<li>面向对象通常包括以下特性：命名对象、封装、继承</li>\\n</ul>\\n<h3> 对象包含数据和行为</h3>\\n<ul>\\n<li>struct、enum包含数据</li>\\n<li>impl块为之提供了方法</li>\\n<li>但带有方法的struct、enum并没有被称为对象</li>\\n</ul>\\n<div class=\\"language-rust line-numbers-mode\\" data-ext=\\"rs\\"><pre class=\\"language-rust\\"><code><span class=\\"token keyword\\">pub</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token type-definition class-name\\">AveragedCollection</span> <span class=\\"token punctuation\\">{</span>\\n    list<span class=\\"token punctuation\\">:</span> <span class=\\"token class-name\\">Vec</span><span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">i32</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">,</span>\\n    average<span class=\\"token punctuation\\">:</span> <span class=\\"token keyword\\">f64</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token comment\\">// 结构体是共有的，里面的字段是私有的，访问和修改里面的数据使用下面的pub方法</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">impl</span> <span class=\\"token class-name\\">AveragedCollection</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">pub</span> <span class=\\"token keyword\\">fn</span> <span class=\\"token function-definition function\\">new</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">-&gt;</span> <span class=\\"token class-name\\">AveragedCollection</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">AveragedCollection</span> <span class=\\"token punctuation\\">{</span>\\n            list<span class=\\"token punctuation\\">:</span> <span class=\\"token macro property\\">vec!</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n            average<span class=\\"token punctuation\\">:</span> <span class=\\"token number\\">0.0</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">pub</span> <span class=\\"token keyword\\">fn</span> <span class=\\"token function-definition function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span><span class=\\"token keyword\\">mut</span> <span class=\\"token keyword\\">self</span><span class=\\"token punctuation\\">,</span> value<span class=\\"token punctuation\\">:</span> <span class=\\"token keyword\\">i32</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">self</span><span class=\\"token punctuation\\">.</span>list<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">self</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">update_average</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">pub</span> <span class=\\"token keyword\\">fn</span> <span class=\\"token function-definition function\\">remove</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span><span class=\\"token keyword\\">mut</span> <span class=\\"token keyword\\">self</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">-&gt;</span> <span class=\\"token class-name\\">Option</span><span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">i32</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">let</span> result <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">self</span><span class=\\"token punctuation\\">.</span>list<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">pop</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">match</span> result <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">Some</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">self</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">update_average</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token class-name\\">Some</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token class-name\\">None</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token class-name\\">None</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">pub</span> <span class=\\"token keyword\\">fn</span> <span class=\\"token function-definition function\\">average</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span><span class=\\"token keyword\\">self</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">-&gt;</span> <span class=\\"token keyword\\">f64</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">self</span><span class=\\"token punctuation\\">.</span>average\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">fn</span> <span class=\\"token function-definition function\\">update_average</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span><span class=\\"token keyword\\">mut</span> <span class=\\"token keyword\\">self</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">let</span> total<span class=\\"token punctuation\\">:</span> <span class=\\"token keyword\\">i32</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">self</span><span class=\\"token punctuation\\">.</span>list<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">iter</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sum</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">self</span><span class=\\"token punctuation\\">.</span>average <span class=\\"token operator\\">=</span> total <span class=\\"token keyword\\">as</span> <span class=\\"token keyword\\">f64</span> <span class=\\"token operator\\">/</span> <span class=\\"token keyword\\">self</span><span class=\\"token punctuation\\">.</span>list<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">len</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">as</span> <span class=\\"token keyword\\">f64</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
