import{_ as n,X as a,Y as s,a2 as e}from"./framework-a8949fcd.js";const t={},i=e(`<h2 id="_7-1-package-crate-定义module" tabindex="-1"><a class="header-anchor" href="#_7-1-package-crate-定义module" aria-hidden="true">#</a> 7.1 Package,Crate,定义Module</h2><h3 id="rust的代码组织" tabindex="-1"><a class="header-anchor" href="#rust的代码组织" aria-hidden="true">#</a> Rust的代码组织</h3><ul><li>代码组织主要包括 <ul><li>那些细节可以暴露，哪些细节是私有的</li><li>作用域内哪些名称有效</li></ul></li><li>模块系统 <ul><li><mark>Package（包）</mark> Cargo的特性，让你构建、测试、共享crate</li><li><mark>Crate（单元包）</mark> 一个模块树，它可以产生一个library或可执行文件</li><li><mark>Module（模块）</mark> use让你控制代码的组织、作用域、私有路径</li><li><mark>Path（路径）</mark> 为struct、function、module等命名的方式</li></ul></li></ul><h3 id="package和crate" tabindex="-1"><a class="header-anchor" href="#package和crate" aria-hidden="true">#</a> Package和Crate</h3><ul><li>Crate的类型： <ul><li>binary</li><li>library</li></ul></li><li>Crate Root： <ul><li>是源代码文件</li><li>Rust编译器从这里开始，组成你的Crate的根Module</li></ul></li><li>一个Package： <ul><li>包含一个Cargo.toml，它描述了如何构建这些Crates</li><li>只能包含0-1个library crate</li><li>可以包含任意数量的binary cate</li><li>但至少包含一个crate（library或binary）</li></ul></li></ul><h3 id="cargo的惯例" tabindex="-1"><a class="header-anchor" href="#cargo的惯例" aria-hidden="true">#</a> Cargo的惯例</h3><ul><li>src/main.rs <ul><li>binary crate 的 crate root</li><li>crate名与package名相同</li></ul></li><li>src/lib.rs <ul><li>package 包含一个library crate</li><li>library crate 的 crate root</li><li>crate名与package名相同</li></ul></li><li>Cargo把crate root文件交给rust来构建library或binary</li><li>一个Package可以同时包含src/main.rs和src/lib.rs <ul><li>一个binary crate，一个library crate</li><li>名称与包相同</li></ul></li><li>一个Package可以有多个binary crate <ul><li>可以把文件放在src/bin中</li><li>每个文件都是单独的binary crate</li></ul></li></ul><h3 id="crate-的作用" tabindex="-1"><a class="header-anchor" href="#crate-的作用" aria-hidden="true">#</a> Crate 的作用</h3><ul><li>将相关的功能组合到一个作用域内，便于在项目期间进行共享 <ul><li>防止冲突</li></ul></li><li>例如rand crate，访问它的功能需要通过它的名字：rand</li></ul><h3 id="定义moudle来控制作用域和私有性" tabindex="-1"><a class="header-anchor" href="#定义moudle来控制作用域和私有性" aria-hidden="true">#</a> 定义moudle来控制作用域和私有性</h3><ul><li><p>Module</p><ul><li>在一个crate内，将代码进行分别组</li><li>增加可读性，易于复用</li><li>控制项目（item）的私有性 public、private</li></ul></li><li><p>建立module</p><ul><li>mod 关键字</li><li>可嵌套</li><li>可包含其他项（struct、enum、常量、trait、函数等）的定义</li></ul></li><li><p>例子</p></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">mod</span> <span class="token module-declaration namespace">front_of_house</span><span class="token punctuation">{</span>
    <span class="token keyword">mod</span> <span class="token module-declaration namespace">hosting</span><span class="token punctuation">{</span>
        <span class="token keyword">fn</span> <span class="token function-definition function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">fn</span> <span class="token function-definition function">seat_at_table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">mod</span> <span class="token module-declaration namespace">serving</span><span class="token punctuation">{</span>
        <span class="token keyword">fn</span> <span class="token function-definition function">take_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">fn</span> <span class="token function-definition function">serve_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">fn</span> <span class="token function-definition function">take_payment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-2-路径path" tabindex="-1"><a class="header-anchor" href="#_7-2-路径path" aria-hidden="true">#</a> 7.2 路径Path</h2><h3 id="path" tabindex="-1"><a class="header-anchor" href="#path" aria-hidden="true">#</a> Path</h3><ul><li>为了在Rust的模块中找到某个条目，需要使用<mark>路径</mark>。</li><li>路径的两种形式： <ul><li>绝对路径：从crate root 开始，使用crate名或者字面值crate</li><li>相对路径：从当前模块开始，使用<code>self</code>、<code>super</code>或当前模块的标识符</li></ul></li><li>路径至少由一个标识符组成，标识符之间使用<code>::</code>。</li></ul><h3 id="私有边界-privacy-boundary" tabindex="-1"><a class="header-anchor" href="#私有边界-privacy-boundary" aria-hidden="true">#</a> 私有边界（privacy boundary）</h3><ul><li>模块不仅可以组织代码，还可以定义私有边界</li><li>如果想把函数或struct等设为私有，可以把它放到某个模块当中</li><li>Rust中所有条目（函数，方法，struct，enum，模块，常量）默认是私有的</li><li>例子</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">front_of_house</span><span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">hosting</span><span class="token punctuation">{</span>
        <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add_to_wait_list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">eat_at_restaurant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>front_of_house<span class="token punctuation">::</span>hosting<span class="token punctuation">::</span></span><span class="token function">add_to_wait_list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token namespace">front_of_house<span class="token punctuation">::</span>hosting<span class="token punctuation">::</span></span><span class="token function">add_to_wait_list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>父级模块无法访问模块中的私有条目</li><li>子模块中可以使用所有祖先模块中的私有条目</li><li>根级mod可以相互调用 <ul><li>可以将上面例子中<code>pub mod front_of_house</code>中的<code>pub</code>掉</li></ul></li></ul><h3 id="pub关键字" tabindex="-1"><a class="header-anchor" href="#pub关键字" aria-hidden="true">#</a> pub关键字</h3><ul><li>声明mod方法等为共有</li></ul><h3 id="super关键字" tabindex="-1"><a class="header-anchor" href="#super关键字" aria-hidden="true">#</a> super关键字</h3><ul><li><mark>super</mark>用来访问父级模块路径中的内容，类似于文件系统中的<code>..</code></li></ul><h3 id="pub-struct" tabindex="-1"><a class="header-anchor" href="#pub-struct" aria-hidden="true">#</a> pub struct</h3><ul><li>pub放在struct前： <ul><li>struct是公共的</li><li>struct的字段默认是私有的</li></ul></li><li>struct字段需要单数设置pub来变成共有</li><li>例子</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">mod</span> <span class="token module-declaration namespace">back_of_house</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Breakfast</span> <span class="token punctuation">{</span>
        <span class="token keyword">pub</span> toast<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
        seasonal_fruit<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">impl</span> <span class="token class-name">Breakfast</span> <span class="token punctuation">{</span>
        <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">summer</span><span class="token punctuation">(</span>toast<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Breakfast</span> <span class="token punctuation">{</span>
            <span class="token class-name">Breakfast</span> <span class="token punctuation">{</span>
                toast<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>toast<span class="token punctuation">)</span><span class="token punctuation">,</span>
                seasonal_fruit<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;peaches&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">eat_at_restaurant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> meal <span class="token operator">=</span> <span class="token namespace">back_of_house<span class="token punctuation">::</span></span><span class="token class-name">Breakfast</span><span class="token punctuation">::</span><span class="token function">summer</span><span class="token punctuation">(</span><span class="token string">&quot;Pye&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    meal<span class="token punctuation">.</span>toast <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Wheat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> meal<span class="token punctuation">.</span>toast<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pub-enum" tabindex="-1"><a class="header-anchor" href="#pub-enum" aria-hidden="true">#</a> pub enum</h3><ul><li>pub 放在enum前 <ul><li>enum是公共的</li><li>enum的变体也是公共的</li></ul></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">mod</span> <span class="token module-declaration namespace">back_of_house</span><span class="token punctuation">{</span>
  <span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">Appetizer</span><span class="token punctuation">{</span>
    soup<span class="token punctuation">,</span>
    salad<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-3-use关键字" tabindex="-1"><a class="header-anchor" href="#_7-3-use关键字" aria-hidden="true">#</a> 7.3 use关键字</h2><ul><li>可以使用<code>use</code>关键字将路径导入到作用域内 <ul><li>仍然遵循私有原则</li></ul></li><li>使用use指定相对路径</li></ul><h3 id="use的习惯用法" tabindex="-1"><a class="header-anchor" href="#use的习惯用法" aria-hidden="true">#</a> use的习惯用法</h3><ul><li>函数：将函数的父级模块引入作用域（指定到父级）</li><li>struct，enum，其他：指定完整路径（指定到本身）</li><li>同名条目：指定到父级</li></ul><h3 id="as-关键字" tabindex="-1"><a class="header-anchor" href="#as-关键字" aria-hidden="true">#</a> as 关键字</h3><ul><li>as关键字可以为引入的路径指定本地的别名 <ul><li><code>user std::io::Result as IoResult;</code></li></ul></li></ul><h3 id="使用pub-use重新导出名称" tabindex="-1"><a class="header-anchor" href="#使用pub-use重新导出名称" aria-hidden="true">#</a> 使用pub use重新导出名称</h3><ul><li>使用<code>use</code>将路径（名称）导入到作用域内后，该名称在此作用域内是私有的</li><li>可以用<code>pub</code>关键字变成共有的 <ul><li><code>pub use create::front_of_house::hosting;</code></li><li>将条目引入作用域</li><li>该条目可以被外部代码引入到他们的作用域</li></ul></li></ul><h3 id="使用外部包" tabindex="-1"><a class="header-anchor" href="#使用外部包" aria-hidden="true">#</a> 使用外部包</h3><ol><li>Cargo.toml添加依赖包（package）</li></ol><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token punctuation">[</span>package<span class="token punctuation">]</span>
name <span class="token operator">=</span> <span class="token string">&quot;rust_project&quot;</span>
version <span class="token operator">=</span> <span class="token string">&quot;0.1.0&quot;</span>
edition <span class="token operator">=</span> <span class="token string">&quot;2021&quot;</span>

<span class="token punctuation">[</span>dependencies<span class="token punctuation">]</span>
rand <span class="token operator">=</span> <span class="token string">&quot;0.8.5&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>use将特定条目引入作用域<code>use rand::Rng;</code></li><li>标准库（std）也被当做外部包 不需要修改Cargo.toml来包含std <code>use std::collections::HashMap;</code></li></ol><h3 id="使用嵌套路径来清理大量的use语句" tabindex="-1"><a class="header-anchor" href="#使用嵌套路径来清理大量的use语句" aria-hidden="true">#</a> 使用嵌套路径来清理大量的use语句</h3><ul><li>如果使用同一个包或模块下的多个条目</li><li>可以使用<strong>嵌套路径</strong>在<strong>同一行内</strong>将上述条目进行引入： <ul><li><code>路径相同的部分::{路径差异的部分}</code></li></ul></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// use std::cmp::Ordering;</span>
<span class="token comment">// use std::io;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">cmp<span class="token punctuation">::</span></span><span class="token class-name">Ordering</span><span class="token punctuation">,</span> io<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// use std::io;</span>
<span class="token comment">// use std::io::Write;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token class-name">Write</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通配符" tabindex="-1"><a class="header-anchor" href="#通配符" aria-hidden="true">#</a> 通配符*</h3><ul><li>使用*可以把路径中所有的公共条目都引入到作用域<code>use std::collections::*</code></li><li>谨慎使用</li><li>应用场景 <ul><li>测试场景</li><li>预导入模块</li></ul></li></ul><h2 id="_7-4-将模块拆分为不同的文件" tabindex="-1"><a class="header-anchor" href="#_7-4-将模块拆分为不同的文件" aria-hidden="true">#</a> 7.4 将模块拆分为不同的文件</h2><h3 id="将模块内容移动到其他文件" tabindex="-1"><a class="header-anchor" href="#将模块内容移动到其他文件" aria-hidden="true">#</a> 将模块内容移动到其他文件</h3><ul><li>模块定义是，如果模块名后面是<code>;</code>，而不是代码块： <ul><li>Rust会从与模块同名的文件中加载内容（src目录下查找同名的.rs文件）</li><li>模块树的结构不会发生变化</li><li>目录的层级结构要和模块的层级结构相匹配</li></ul></li><li>随着模块逐渐变大，该技术让你可以把模块的内容移动到其他文件中</li></ul>`,49),l=[i];function c(o,p){return a(),s("div",null,l)}const r=n(t,[["render",c],["__file","7-Package.html.vue"]]);export{r as default};
