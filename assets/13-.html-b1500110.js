import{_ as n,X as s,Y as a,a2 as t}from"./framework-a8949fcd.js";const e={},p=t(`<h2 id="_13-1-闭包1-使用闭包创建抽象行为" tabindex="-1"><a class="header-anchor" href="#_13-1-闭包1-使用闭包创建抽象行为" aria-hidden="true">#</a> 13.1 闭包1-使用闭包创建抽象行为</h2><h3 id="什么是闭包-closure" tabindex="-1"><a class="header-anchor" href="#什么是闭包-closure" aria-hidden="true">#</a> 什么是闭包（closure）</h3><ul><li>闭包：可以捕获其所在环境的匿名函数</li><li>闭包： <ul><li>匿名函数</li><li>保存为变量或作为参数</li><li>可以在一个地方创建闭包，然后在另一个上下文中调用闭包来完成运算</li><li>可以从其定义的作用域捕获值</li></ul></li></ul><h3 id="例子-生成自定义运动计划的程序" tabindex="-1"><a class="header-anchor" href="#例子-生成自定义运动计划的程序" aria-hidden="true">#</a> 例子-生成自定义运动计划的程序</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// 定义一个闭包</span>
<span class="token keyword">let</span> expensive_closure <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>num<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>num2<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
  <span class="token comment">// 闭包 函数体</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;calculate slowly ...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  num
  <span class="token comment">// 定义了一个函数，但是没有执行</span>
  <span class="token comment">// 函数遇到小括号以后执行</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-2-闭包-2-闭包类型推断和标注" tabindex="-1"><a class="header-anchor" href="#_13-2-闭包-2-闭包类型推断和标注" aria-hidden="true">#</a> 13.2 闭包（2）- 闭包类型推断和标注</h2><ul><li>闭包不要求标注参数和返回值类型</li><li>闭包通常很短小，只在狭小的上下文中工作，编译器通常能推断出类型</li></ul><h3 id="函数和闭包的定义语法" tabindex="-1"><a class="header-anchor" href="#函数和闭包的定义语法" aria-hidden="true">#</a> 函数和闭包的定义语法</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span>  <span class="token function-definition function">add_one_v1</span>   <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u32</span> <span class="token punctuation">{</span> x <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> add_one_v2 <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u32</span> <span class="token punctuation">{</span> x <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> add_one_v3 <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span>             <span class="token punctuation">{</span> x <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> add_one_v4 <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span>               x <span class="token operator">+</span> <span class="token number">1</span>  <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="闭包的类型推断" tabindex="-1"><a class="header-anchor" href="#闭包的类型推断" aria-hidden="true">#</a> 闭包的类型推断</h3><ul><li>闭包额定义最终只会为参数、返回值推断出唯一具体的类型</li></ul><h2 id="_13-3-闭包-3-使用泛型参数和fn-trait来存储闭包" tabindex="-1"><a class="header-anchor" href="#_13-3-闭包-3-使用泛型参数和fn-trait来存储闭包" aria-hidden="true">#</a> 13.3 闭包（3）- 使用泛型参数和fn trait来存储闭包</h2><h3 id="strut" tabindex="-1"><a class="header-anchor" href="#strut" aria-hidden="true">#</a> strut</h3><ul><li>创建一个strut，它持有闭包及其调用结果 <ul><li>只会在需要结果时才执行该包</li><li>可缓存结果</li></ul></li><li>这个模式通常叫做记忆化（memoization）或延迟计算（lazy evaluation）</li></ul><h3 id="如何让strut持有闭包" tabindex="-1"><a class="header-anchor" href="#如何让strut持有闭包" aria-hidden="true">#</a> 如何让strut持有闭包</h3><ul><li>strut的定义需要知道所有字段的类型 <ul><li>需要指明闭包类型</li></ul></li><li>每个闭包实例都有自己唯一的匿名类型，即使两个闭包签名完全一样</li><li>所以要使用：泛型和trait bound（10章）</li></ul><h3 id="fn-trait" tabindex="-1"><a class="header-anchor" href="#fn-trait" aria-hidden="true">#</a> Fn Trait</h3><ul><li>Fn Trait由标准库提供</li><li>所有的闭包都至少实现了以下trait之一： <ul><li>Fn</li><li>FnMut</li><li>FnOnce</li></ul></li></ul><h3 id="使用缓存器cacher实现的限制" tabindex="-1"><a class="header-anchor" href="#使用缓存器cacher实现的限制" aria-hidden="true">#</a> 使用缓存器Cacher实现的限制</h3><ol><li>Cacher实例假定针对不同的参数arg，value方法总会得到相同的值 <ol><li>可以用HashMap代替单个值 <ol><li>key：arg参数</li><li>value：执行闭包的结果</li></ol></li></ol></li><li>只能接收一个u32类型的参数和u32类型的返回值</li></ol><h2 id="_13-4-闭包-4-使用闭包捕获环境" tabindex="-1"><a class="header-anchor" href="#_13-4-闭包-4-使用闭包捕获环境" aria-hidden="true">#</a> 13.4 闭包（4）- 使用闭包捕获环境</h2><h3 id="闭包可以捕获它们所在的环境" tabindex="-1"><a class="header-anchor" href="#闭包可以捕获它们所在的环境" aria-hidden="true">#</a> 闭包可以捕获它们所在的环境</h3><ul><li>闭包可以访问定义它们作用域内的变量，普通函数则不能</li><li>会产生内存开销</li></ul><h3 id="闭包从所在环境捕获值的方式" tabindex="-1"><a class="header-anchor" href="#闭包从所在环境捕获值的方式" aria-hidden="true">#</a> 闭包从所在环境捕获值的方式</h3><ul><li>与函数获得参数的三种方式一样 <ul><li>取得所有权：FnOnce</li><li>可变的借用：FbMut</li><li>不可变借用：Fn</li></ul></li><li>创建闭包时，通过闭包对环境值的使用后，Rust可以推断出具体使用的哪个trait <ul><li>所有闭包都实现了FnOnce</li><li>没有移动捕获变量的实现了FnMut</li><li>无需可变访问捕获变量的闭包实现了Fn</li></ul></li></ul><h3 id="move-关键字" tabindex="-1"><a class="header-anchor" href="#move-关键字" aria-hidden="true">#</a> move 关键字</h3><ul><li>在参数列表前使用move关键字，可以强制闭包取得它所使用的环境值的所有权 <ul><li>当闭包传递给新线程以移动数据使其归新线程所有时，此技术最为有用</li></ul></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> equal_to_x <span class="token operator">=</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>z<span class="token closure-punctuation punctuation">|</span></span> z <span class="token operator">==</span> x<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a> 最佳实践</h3><ul><li>当指定Fn trait bound之一时，首先用Fn，基于闭包体里的情况，如果需要FnOnce或FnMut，编译器会告诉你</li></ul><h2 id="_13-5-迭代器" tabindex="-1"><a class="header-anchor" href="#_13-5-迭代器" aria-hidden="true">#</a> 13.5 迭代器</h2><h3 id="什么是迭代器" tabindex="-1"><a class="header-anchor" href="#什么是迭代器" aria-hidden="true">#</a> 什么是迭代器</h3><ul><li>迭代器模式：对一系列项执行某些任务</li><li>迭代器负责： <ul><li>遍历每个项</li><li>确定序列（遍历）何时完成</li></ul></li><li>Rust的迭代器 <ul><li>惰性的：除非调用消费迭代器的方法，否则迭代器本身没有任何效果</li></ul></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> v1 <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> v1_iter <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 目前没有使用，所以没有效果</span>

    <span class="token keyword">for</span> val <span class="token keyword">in</span> v1_iter <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Got: {val}&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="iterator-trait-和-next-方法" tabindex="-1"><a class="header-anchor" href="#iterator-trait-和-next-方法" aria-hidden="true">#</a> Iterator trait 和 next 方法</h3><h4 id="iterator-trait" tabindex="-1"><a class="header-anchor" href="#iterator-trait" aria-hidden="true">#</a> Iterator trait</h4><ul><li>所有的迭代器都实现了iterator trait</li><li>iterator trait 定义于标准库，定义大致如下：</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">Iterator</span> <span class="token punctuation">{</span>
  <span class="token keyword">type</span> <span class="token type-definition class-name">Item</span><span class="token punctuation">;</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Item</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>type Item</code>和<code>Self::Item</code>定义了与此该trait关联的类型</p><ul><li>实现Iterator trait 需要你定义一个Item类型，它用于next方法和返回类型（迭代器的返回类型）</li></ul></li><li><p>Iterator trait仅要求实现一个方法next</p></li><li><p>next：</p><ul><li>每次调用返回迭代器中的一项</li><li>返回结果包裹在Some里</li><li>迭代结束返回None</li></ul></li><li><p>可以直接在迭代器中调用next方法</p></li></ul><h3 id="几个迭代方法" tabindex="-1"><a class="header-anchor" href="#几个迭代方法" aria-hidden="true">#</a> 几个迭代方法</h3><ul><li>iter方法：在不可变引用上创建迭代器</li><li>into_iter方法：创建的迭代器会获得所有权</li><li>iter_mut方法： 迭代可变的引用</li></ul><h2 id="_13-6-迭代器-2-消耗、产生迭代器" tabindex="-1"><a class="header-anchor" href="#_13-6-迭代器-2-消耗、产生迭代器" aria-hidden="true">#</a> 13.6 迭代器（2）- 消耗、产生迭代器</h2><h3 id="消耗迭代器的方法" tabindex="-1"><a class="header-anchor" href="#消耗迭代器的方法" aria-hidden="true">#</a> 消耗迭代器的方法</h3><ul><li>在标准库中，Iterator trait有一些带默认实现的方法</li><li>其中有一些方法会调用next方法 <ul><li>实现Iterator trait时必须实现next方法的原因之一</li></ul></li><li>调用next的方法叫做“消耗型适配器” <ul><li>因为调用他们会把迭代器消耗尽</li></ul></li><li>例如sum方法（会消耗尽迭代器） <ul><li>取得迭代器的所有权</li><li>通过反复调用next，遍历所有元素</li><li>每次迭代，把当前元素添加到一个总和里，迭代结束，返回总和</li></ul></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">iterator_sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> v1 <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> v1_iter <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> total<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> v1_iter<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{total}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="产生其他迭代器的方法" tabindex="-1"><a class="header-anchor" href="#产生其他迭代器的方法" aria-hidden="true">#</a> 产生其他迭代器的方法</h3><ul><li>定义在Iterator Trait上的另外一些方法叫做“迭代器适配器” <ul><li>把迭代器转化为不同种类的迭代器</li></ul></li><li>可以通过链式调用使用多个迭代器适配器来执行复杂操作，这种调用可读性较高</li><li>例如：map <ul><li>接收一个闭包，闭包作用于每个元素</li><li>产生一个新的迭代器、</li></ul></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">iterator_sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> v1 <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> v2<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">&gt;</span> <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>y<span class="token closure-punctuation punctuation">|</span></span> y <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> val <span class="token keyword">in</span> v2<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{val}&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>collect方法：消耗型适配器，把结果收集到一个集合类型中</li></ul><h2 id="_13-7-使用闭包捕获环境" tabindex="-1"><a class="header-anchor" href="#_13-7-使用闭包捕获环境" aria-hidden="true">#</a> 13.7 使用闭包捕获环境</h2><h3 id="使用闭包捕获环境" tabindex="-1"><a class="header-anchor" href="#使用闭包捕获环境" aria-hidden="true">#</a> 使用闭包捕获环境</h3><ul><li>filter方法 <ul><li>接收一个闭包</li><li>这个闭包在遍历接待其每个元素时，返回bool类型</li><li>如果闭包返回true：当前元素会包含在filter产生的迭代器中</li><li>如果闭包返回false：当前元素将不会包含在filter产生的迭代器中</li></ul></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Shoe</span> <span class="token punctuation">{</span>
    size<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    style<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">shoes_in_my_size</span><span class="token punctuation">(</span>shoes<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Shoe</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> shoe_size<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Shoe</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    shoes<span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filer</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x<span class="token punctuation">.</span>size <span class="token operator">==</span> shoe_size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-8-创建自定义迭代器" tabindex="-1"><a class="header-anchor" href="#_13-8-创建自定义迭代器" aria-hidden="true">#</a> 13.8 创建自定义迭代器</h2><h3 id="使用iterator-trait来创建自定义迭代器" tabindex="-1"><a class="header-anchor" href="#使用iterator-trait来创建自定义迭代器" aria-hidden="true">#</a> 使用Iterator trait来创建自定义迭代器</h3><ul><li>实现next方法</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> counter <span class="token operator">=</span> <span class="token class-name">Counter</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">7</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> counter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        i <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>

    <span class="token function">using_other_iterator_trait_methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token type-definition class-name">Counter</span> <span class="token punctuation">{</span>
    count<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>
        <span class="token class-name">Counter</span> <span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Iterator</span> <span class="token keyword">for</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Item</span> <span class="token operator">=</span> <span class="token keyword">u32</span><span class="token punctuation">;</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Item</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>count <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token punctuation">{</span>
            <span class="token keyword">self</span><span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">None</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">using_other_iterator_trait_methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> sum<span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token operator">=</span> <span class="token class-name">Counter</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span><span class="token class-name">Counter</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token closure-punctuation punctuation">|</span></span> a <span class="token operator">*</span> b<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-9-改进i-o项目" tabindex="-1"><a class="header-anchor" href="#_13-9-改进i-o项目" aria-hidden="true">#</a> 13.9 改进I/O项目</h2><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">Config</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token keyword">mut</span> args<span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span><span class="token class-name">Args</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Config</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token keyword">str</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> args<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">&quot;not enough arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        args<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token keyword">match</span> args<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Some</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> arg<span class="token punctuation">,</span>
            <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">&quot;Didn&#39;t get a query string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> filename <span class="token operator">=</span> <span class="token keyword">match</span> args<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">Some</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> arg<span class="token punctuation">,</span>
            <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">&quot;Didn&#39;t get a file name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> case_sensitive <span class="token operator">=</span> <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">var</span><span class="token punctuation">(</span><span class="token string">&quot;CASE_INSENSITIVE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is_err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Config</span> <span class="token punctuation">{</span> query<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> case_sensitive <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 返回的字符串是从contents中取得的，所以要和contents有一样的生命周期</span>
<span class="token comment">// 当切片引用的数据是有效的，切片本身是有效的</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">search</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>query<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> contents<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// let mut results = Vec::new();</span>
    <span class="token comment">// </span>
    <span class="token comment">// // 遍历contents中的，中的每一行</span>
    <span class="token comment">// // 检测是否包含query</span>
    <span class="token comment">// for line in contents.lines() {</span>
    <span class="token comment">//     if line.contains(query) {</span>
    <span class="token comment">//         results.push(line);</span>
    <span class="token comment">//     }</span>
    <span class="token comment">// }</span>
    <span class="token comment">// </span>
    <span class="token comment">// results</span>
    
    contents<span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>line<span class="token closure-punctuation punctuation">|</span></span> line<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-10-循环和迭代器的性能比较" tabindex="-1"><a class="header-anchor" href="#_13-10-循环和迭代器的性能比较" aria-hidden="true">#</a> 13.10 循环和迭代器的性能比较</h2><h3 id="零开销抽象" tabindex="-1"><a class="header-anchor" href="#零开销抽象" aria-hidden="true">#</a> 零开销抽象</h3><p>Zero—Cost Abstraction</p><ul><li>使用抽象时不会引入额外的开销</li></ul>`,63),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","13-.html.vue"]]);export{r as default};
