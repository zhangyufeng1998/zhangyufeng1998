import{_ as k,X as r,Y as d,Z as n,a1 as t,a3 as a,$ as s,a2 as u,E as i}from"./framework-a8949fcd.js";const m={},b={class:"table-of-contents"},v=n("h2",{id:"trie树",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#trie树","aria-hidden":"true"},"#"),s(" Trie树")],-1),y=n("p",null,"高效快速存储查找字符串集合的数据结构 ，一般存储全是大写或者全是小写的简单字符串（多叉树）",-1),w=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<iostream>")]),s(`

`),n("span",{class:"token keyword"},"using"),s(),n("span",{class:"token keyword"},"namespace"),s(" std"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"int"),s(" N "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"100010"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"//cnt表示这个节点结尾有多少个单词，"),s(`
`),n("span",{class:"token keyword"},"int"),s(" son"),n("span",{class:"token punctuation"},"["),s("N"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"26"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s("cnt"),n("span",{class:"token punctuation"},"["),s("N"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s("idx"),n("span",{class:"token punctuation"},";"),n("span",{class:"token comment"},"//下标是0的点，既是根节点，又是空节点"),s(`

`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"insert"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"char"),s(" str"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"//从根节点开始遍历"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" p "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// c++中字符串结尾是\\0,str[i]判断是否走到结尾"),s(`
    `),n("span",{class:"token keyword"},"for"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" str"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 将小写字母a~z映射成0~25"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" u "),n("span",{class:"token operator"},"="),s(" str"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token char"},"'a'"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// 如果不存在字母则创建节点"),s(`
        `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("son"),n("span",{class:"token punctuation"},"["),s("p"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("u"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(" son"),n("span",{class:"token punctuation"},"["),s("p"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("u"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"++"),s("idx"),n("span",{class:"token punctuation"},";"),s(`

        p `),n("span",{class:"token operator"},"="),s(" son"),n("span",{class:"token punctuation"},"["),s("p"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("u"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    
    cnt`),n("span",{class:"token punctuation"},"["),s("p"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("java"),n("span",{class:"token punctuation"},"."),s("util"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"Scanner")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Main"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token class-name"},"N"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"100010"),n("span",{class:"token punctuation"},","),s("idx "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" song "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token class-name"},"N"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"26"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" cnt  "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token class-name"},"N"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"char"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" str "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token keyword"},"char"),n("span",{class:"token punctuation"},"["),n("span",{class:"token class-name"},"N"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s("  "),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"insert"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"char"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" str"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" p "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"//下标0表示头结点，根节点"),s(`
        `),n("span",{class:"token keyword"},"for"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" str"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"++"),s(),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token comment"},"// 将字符串每个字符都转化成数字；0-25"),s(`
            `),n("span",{class:"token keyword"},"int"),s(" u "),n("span",{class:"token operator"},"="),s(" str"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token char"},"'a'"),n("span",{class:"token punctuation"},";"),s(` 
            `),n("span",{class:"token comment"},"//如果这个的儿子分支没有字符，说明这条分支还没有这个字符插入过"),s(`
            `),n("span",{class:"token comment"},"//就新建一个然后赋值为然后把【idx】下标赋值上去，作为每个分支的专属坐标"),s(`
            `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("song"),n("span",{class:"token punctuation"},"["),s("p"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("u"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(" song"),n("span",{class:"token punctuation"},"["),s("p"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("u"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"++"),s("idx"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token comment"},"//然后将p往下前进一层"),s(`
            p `),n("span",{class:"token operator"},"="),s(" song"),n("span",{class:"token punctuation"},"["),s("p"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("u"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token comment"},"//最后停在那一层的那个数字就做标记，说明这是一个字符串的结束。"),s(`
        cnt`),n("span",{class:"token punctuation"},"["),s("p"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"query"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"char"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" str"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" p "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),n("span",{class:"token comment"},"//从根节点开始，下标是0表示根节点，头结点"),s(`
        `),n("span",{class:"token keyword"},"for"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" str"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"int"),s(" u "),n("span",{class:"token operator"},"="),s(" str"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token char"},"'a'"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 将字符串每个字符都转化成数字0-25"),s(`
            `),n("span",{class:"token comment"},"//如果这个点上面没有标记，就说明没有存入过这个字符，所以返回0"),s(`
            `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("song"),n("span",{class:"token punctuation"},"["),s("p"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("u"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token comment"},"//如果这个点上面能寻找到这个字符，就让他往下一层继续寻找；"),s(`
            p `),n("span",{class:"token operator"},"="),s(" song"),n("span",{class:"token punctuation"},"["),s("p"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("u"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token comment"},"//最后查找完之后输出最后一个做标记的点为下标的cnt数组的值。"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" cnt"),n("span",{class:"token punctuation"},"["),s("p"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" args"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"Scanner"),s(" scan "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Scanner"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("in"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" n "),n("span",{class:"token operator"},"="),s(" scan"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"nextInt"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" sss "),n("span",{class:"token operator"},"="),s(" scan"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"nextLine"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"while"),n("span",{class:"token punctuation"},"("),s("n "),n("span",{class:"token operator"},"--"),s(),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token class-name"},"String"),s(" s "),n("span",{class:"token operator"},"="),s(" scan"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"nextLine"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" st "),n("span",{class:"token operator"},"="),s(" s"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"split"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'" "'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token class-name"},"String"),s(" s1 "),n("span",{class:"token operator"},"="),s(" st"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token class-name"},"String"),s(" s2 "),n("span",{class:"token operator"},"="),s(" st"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("s1"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"equals"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"I"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token function"},"insert"),n("span",{class:"token punctuation"},"("),s("s2"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toCharArray"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token keyword"},"else"),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"query"),n("span",{class:"token punctuation"},"("),s("s2"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toCharArray"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=u(`<div class="hint-container tip"><p class="hint-container-title">数组建树</p><p>trie树那里，[N][26]的第一维度不是树的层数；第一维是结点总数，而结点和结点之间的关系（谁是谁儿子）存在第二个维度，比如[0][1]=3, [0]表示根节点，[1]表示它有一个儿子‘b’,这个儿子的下标是3；接着如果有一个[3][2]=8 ; 说明根节点的儿子‘b’也有一个儿子‘c’，这个孙子的下标就是8；这样传递下去，就是一个字符串。随便给一个结点[x][y], 并不能看出它在第几层，只能知道，它的儿子是谁。</p></div><details class="hint-container details"><summary>java中toCharArray()</summary><p>将字符串中的字符转化为字符数组 代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;I miss you&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>I miss you
10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>简单应用：用于for循环遍历字符串</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;zyfstc!&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span>s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>zyfstc!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h2 id="并查集" tabindex="-1"><a class="header-anchor" href="#并查集" aria-hidden="true">#</a> 并查集</h2><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h3><ul><li>将两个集合合并</li><li>询问两个元素是否在一个集合当中</li></ul><h3 id="基本思想" tabindex="-1"><a class="header-anchor" href="#基本思想" aria-hidden="true">#</a> 基本思想</h3><p>用树（不一定为二叉树）维护两个集合，根节点的编号就是当前集合的编号，每一个点存储它的父节点，p[x]表示x的父节点。</p><p>问题1：如何判断树根：if(p[x] == x)</p><p>问题2：如何求x的集合编号：while（p[x] != x）x=p[x];</p><ul><li>路径优化</li><li>按秩合并（一般不写）</li></ul><p>问题3：如何合并两个集合：px是x的集合编号，py是y的集合编号。p[x] = y</p><h3 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例" aria-hidden="true">#</a> 代码示例</h3><h4 id="合并集合" tabindex="-1"><a class="header-anchor" href="#合并集合" aria-hidden="true">#</a> 合并集合</h4><div class="hint-container info"><p class="hint-container-title">题目描述</p><p>一共有 n个数，编号是 1∼n，最开始每个数各自在一个集合中。</p><p>现在要进行 m个操作，操作共有两种：</p><p><code>M a b</code>，将编号为a和b的两个数所在的集合合并，如果两个数已经在同一个集合中，则忽略这个操作；</p><p><code>Q a b</code>，询问编号为a和b的两个数是否在同一个集合中；</p><p>输入样例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>4 5
M 1 2
M 3 4
Q 1 2
Q 1 3
Q 3 4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出样例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Yes
No
Yes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,14),g=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<iostream>")]),s(`

`),n("span",{class:"token keyword"},"using"),s(),n("span",{class:"token keyword"},"namespace"),s(" std"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"int"),s(" N "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"100010"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"int"),s(" n"),n("span",{class:"token punctuation"},","),s("m"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"//father数组，每个元素它的父节点是谁"),s(`
`),n("span",{class:"token keyword"},"int"),s(" p"),n("span",{class:"token punctuation"},"["),s("N"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" x"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// 返回x的祖宗节点（集合编号）+ 路径压缩"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("p"),n("span",{class:"token punctuation"},"["),s("x"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},"!="),s("x"),n("span",{class:"token punctuation"},")"),s(" p"),n("span",{class:"token punctuation"},"["),s("x"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),s("p"),n("span",{class:"token punctuation"},"["),s("x"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" p"),n("span",{class:"token punctuation"},"["),s("x"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token function"},"scanf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d%d"'),n("span",{class:"token punctuation"},","),n("span",{class:"token operator"},"&"),s("n"),n("span",{class:"token punctuation"},","),n("span",{class:"token operator"},"&"),s("m"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"for"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<="),s(" n"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),s(),n("span",{class:"token punctuation"},")"),s(" p"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" i"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"while"),n("span",{class:"token punctuation"},"("),s("m"),n("span",{class:"token operator"},"--"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"char"),s(" op"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" a"),n("span",{class:"token punctuation"},","),s("b"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token function"},"scanf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%s%d%d"'),n("span",{class:"token punctuation"},","),s("op"),n("span",{class:"token punctuation"},","),n("span",{class:"token operator"},"&"),s("a"),n("span",{class:"token punctuation"},","),n("span",{class:"token operator"},"&"),s("b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("op"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token char"},"'M'"),n("span",{class:"token punctuation"},")"),s(" p"),n("span",{class:"token punctuation"},"["),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),s("b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"else"),s(`
        `),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),s("b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token function"},"puts"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Yes"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token function"},"puts"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"No"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("java"),n("span",{class:"token punctuation"},"."),s("util"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"Scanner")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Main"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token class-name"},"N"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"100010"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" p "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token class-name"},"N"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" args"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"Scanner"),s(" scan "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Scanner"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("in"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" n "),n("span",{class:"token operator"},"="),s(" scan"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"nextInt"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 全部有n个数"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" m "),n("span",{class:"token operator"},"="),s(" scan"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"nextInt"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 读入m个操作"),s(`
        `),n("span",{class:"token comment"},"//将n个数每个数各自都在一个集合里面。都指向自己，说明现在有多少个集合"),s(`
        `),n("span",{class:"token keyword"},"for"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<="),s(" n "),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(" p"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" i"),n("span",{class:"token punctuation"},";"),s(` 
        `),n("span",{class:"token keyword"},"while"),n("span",{class:"token punctuation"},"("),s("m "),n("span",{class:"token operator"},"--"),s(),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token class-name"},"String"),s(" s "),n("span",{class:"token operator"},"="),s(" scan"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token keyword"},"int"),s(" a "),n("span",{class:"token operator"},"="),s(" scan"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"nextInt"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token keyword"},"int"),s(" b "),n("span",{class:"token operator"},"="),s(" scan"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"nextInt"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token comment"},"//合并集合"),s(`
            `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("s"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"equals"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"M"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(" p"),n("span",{class:"token punctuation"},"["),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),s("b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"//将a集合的根节点即祖先指向b集合的祖先 "),s(`
            `),n("span",{class:"token keyword"},"else"),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token comment"},"//是否同个集合"),s(`
                `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),s("b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Yes"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"//如果两个集合的祖先相同说明两个集合在同个集合中。"),s(`
                `),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"No"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"//否则相反"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token comment"},"//并查集的核心操作，寻找根节点祖先 + 路径压缩"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 如果这个集合的父节点指向的不是自己，说明不是根节点，递归寻找，"),s(`
        `),n("span",{class:"token comment"},"//最后找到根节点之后，把路径上的所有集合都指向根节点、"),s(`
        `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("p"),n("span",{class:"token punctuation"},"["),s("x"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"!="),s(" x"),n("span",{class:"token punctuation"},")"),s(" p"),n("span",{class:"token punctuation"},"["),s("x"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),s("p"),n("span",{class:"token punctuation"},"["),s("x"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(` 
        `),n("span",{class:"token keyword"},"return"),s(" p"),n("span",{class:"token punctuation"},"["),s("x"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 最后返回根节点"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=u(`<h4 id="连通块中点的数量" tabindex="-1"><a class="header-anchor" href="#连通块中点的数量" aria-hidden="true">#</a> 连通块中点的数量</h4><div class="hint-container info"><p class="hint-container-title">题目描述</p><p>给定一个包含n个点（编号为 1∼n）的无向图，初始时图中没有边。 现在要进行m个操作，操作共有三种： <code>C a b</code>，在点a和点b之间连一条边a和b可能相等； <code>Q1 a b</code>，询问点a和点b是否在同一个连通块中a和b可能相等； <code>Q2 a</code>，询问点a所在连通块中点的数量；</p><p><strong>输入格式</strong></p><p>第一行输入整数 n和 m接下来 m行，每行包含一个操作指令，指令为 <code>C a b</code>，<code>Q1 a b</code> 或 <code>Q2 a</code> 中的一种。</p><p><strong>输入样例</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>5 5
C 1 2
Q1 1 2
Q2 1
C 2 5
Q2 5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出样例</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Yes
2
3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,2),S=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<iostream>")]),s(`

`),n("span",{class:"token keyword"},"using"),s(),n("span",{class:"token keyword"},"namespace"),s(" std"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"int"),s(" N "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"100010"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"int"),s(" n"),n("span",{class:"token punctuation"},","),s(" m"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"int"),s(" p"),n("span",{class:"token punctuation"},"["),s("N"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" cnt"),n("span",{class:"token punctuation"},"["),s("N"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" x"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("p"),n("span",{class:"token punctuation"},"["),s("x"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"!="),s(" x"),n("span",{class:"token punctuation"},")"),s(" p"),n("span",{class:"token punctuation"},"["),s("x"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),s("p"),n("span",{class:"token punctuation"},"["),s("x"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" p"),n("span",{class:"token punctuation"},"["),s("x"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    cin `),n("span",{class:"token operator"},">>"),s(" n "),n("span",{class:"token operator"},">>"),s(" m"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<="),s(" n"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"++"),s(),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
        p`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" i"),n("span",{class:"token punctuation"},";"),s(`
        cnt`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("m "),n("span",{class:"token operator"},"--"),s(),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
        string op`),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" a"),n("span",{class:"token punctuation"},","),s(" b"),n("span",{class:"token punctuation"},";"),s(`
        cin `),n("span",{class:"token operator"},">>"),s(" op"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("op "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token string"},'"C"'),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"{"),s(`
            cin `),n("span",{class:"token operator"},">>"),s(" a "),n("span",{class:"token operator"},">>"),s(" b"),n("span",{class:"token punctuation"},";"),s(`
            a `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(" b "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),s("b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("a "),n("span",{class:"token operator"},"!="),s(" b"),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token punctuation"},"{"),s(`
                p`),n("span",{class:"token punctuation"},"["),s("a"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" b"),n("span",{class:"token punctuation"},";"),s(`
                cnt`),n("span",{class:"token punctuation"},"["),s("b"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"+="),s(" cnt"),n("span",{class:"token punctuation"},"["),s("a"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("op "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token string"},'"Q1"'),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"{"),s(`
            cin `),n("span",{class:"token operator"},">>"),s(" a "),n("span",{class:"token operator"},">>"),s(" b"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),s("b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token function"},"puts"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Yes"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token function"},"puts"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"No"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"else"),s(`
        `),n("span",{class:"token punctuation"},"{"),s(`
            cin `),n("span",{class:"token operator"},">>"),s(" a"),n("span",{class:"token punctuation"},";"),s(`
            cout `),n("span",{class:"token operator"},"<<"),s(" cnt"),n("span",{class:"token punctuation"},"["),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"<<"),s(" endl"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),z=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("java"),n("span",{class:"token punctuation"},"."),s("util"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"Scanner")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Main"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token class-name"},"N"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"100010"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" p "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token class-name"},"N"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" size "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token class-name"},"N"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),n("span",{class:"token comment"},"//size用来存每个集合中数的个数"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" args"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"Scanner"),s(" scan "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Scanner"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("in"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" n "),n("span",{class:"token operator"},"="),s(" scan"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"nextInt"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" m "),n("span",{class:"token operator"},"="),s(" scan"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"nextInt"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"for"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<="),s(" n "),n("span",{class:"token punctuation"},";"),s("i "),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
            p`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" i"),n("span",{class:"token punctuation"},";"),s(`
            size`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),n("span",{class:"token comment"},"// 一开始每个数是一个集合，各自都是个数为1；"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"while"),n("span",{class:"token punctuation"},"("),s("m "),n("span",{class:"token operator"},"--"),s(),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token class-name"},"String"),s(" s "),n("span",{class:"token operator"},"="),s(" scan"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("s"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"equals"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"C"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token keyword"},"int"),s(" a "),n("span",{class:"token operator"},"="),s(" scan"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"nextInt"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token keyword"},"int"),s(" b "),n("span",{class:"token operator"},"="),s(" scan"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"nextInt"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),s("b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"continue"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 这里需要特判一下，如果两个数是同个集合中的数，就结束；"),s(`
                `),n("span",{class:"token keyword"},"else"),n("span",{class:"token punctuation"},"{"),s(`  
                    size`),n("span",{class:"token punctuation"},"["),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),s("b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"+="),s(" size"),n("span",{class:"token punctuation"},"["),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 只有两个数的根节点，也就是祖先的size值才是有用的，"),s(`
                    `),n("span",{class:"token comment"},"//两个集合中的赋值给另一个祖先的，即赋值给另一个祖先的这个祖先就是合并之后的两个集合的祖先"),s(`
                    `),n("span",{class:"token comment"},"//  b的size[]  +  =a的size[] 因为b是合并之后的新祖先，所以要让b加上被合并的a"),s(`
                    p`),n("span",{class:"token punctuation"},"["),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),s("b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"//合并操作，p[a]的祖先指向b，说明b是合并之后的祖先"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(`

            `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("s"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"equals"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Q1"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token keyword"},"int"),s(" a "),n("span",{class:"token operator"},"="),s(" scan"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"nextInt"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token keyword"},"int"),s(" b "),n("span",{class:"token operator"},"="),s(" scan"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"nextInt"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),s("b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Yes"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"No"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token keyword"},"else"),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token keyword"},"int"),s(" a "),n("span",{class:"token operator"},"="),s(" scan"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"nextInt"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token comment"},"//只有根节点的size才是有用的,则通过find(a)找到他的根节点然后输出根节点的size;"),s(`
                `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),s("size"),n("span",{class:"token punctuation"},"["),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("p"),n("span",{class:"token punctuation"},"["),s("x"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"!="),s(" x"),n("span",{class:"token punctuation"},")"),s(" p"),n("span",{class:"token punctuation"},"["),s("x"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"find"),n("span",{class:"token punctuation"},"("),s("p"),n("span",{class:"token punctuation"},"["),s("x"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" p"),n("span",{class:"token punctuation"},"["),s("x"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=u(`<h2 id="堆" tabindex="-1"><a class="header-anchor" href="#堆" aria-hidden="true">#</a> 堆</h2><h3 id="如何手写一个堆" tabindex="-1"><a class="header-anchor" href="#如何手写一个堆" aria-hidden="true">#</a> 如何手写一个堆？</h3><ol><li>插入一个数</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//heap代表堆，size代表堆的大小</span>
heap<span class="token punctuation">[</span> <span class="token operator">++</span> size<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
<span class="token function">up</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>求集合中的最小值 <code>heap[1]</code></li><li>删除最小值 <code>heap[1] = heap[size];size -- ;down(1);</code></li><li>删除任意一个元素 <code>heap[k] = heap[size];size --;down(k);up(k);</code></li><li>修改任意一个元素</li></ol><p><code>down(x)</code>将一个节点向下移 当一个值变大了，就像下移动，与左儿子和右儿子比较之后，与其中最小的节点交换，直至不能交换为止</p><p><code>up(x)</code>将一个节点向上移</p><h3 id="基本结构" tabindex="-1"><a class="header-anchor" href="#基本结构" aria-hidden="true">#</a> 基本结构</h3><p>堆是一颗完全二叉树，除了最下面一层，所有节点都是满的，最下面一从左到右排列。 小根堆（每个点都小于等于左右儿子）</p><p><strong>堆的存储</strong>：使用一个<mark>一维数组</mark>来存储</p><p>1号节点为根节点，x的左儿子为2x，右儿子为2x+1</p><p><mark>下标从1开始</mark>（从0开始2x还是0）</p><h3 id="代码示例-1" tabindex="-1"><a class="header-anchor" href="#代码示例-1" aria-hidden="true">#</a> 代码示例</h3><h4 id="堆排序" tabindex="-1"><a class="header-anchor" href="#堆排序" aria-hidden="true">#</a> 堆排序</h4><div class="hint-container info"><p class="hint-container-title">问题描述</p><p>输入一个长度为n的整数数列，从小到大输出前m小的数</p><p><strong>输入格式</strong>：第一行包含整数n和m，第二行包含n个整数，表示整数数列。</p><p><strong>输出格式</strong>：共一行，包含m个整数，表示书整数数列中前m小的数。</p><p><strong>输入样例</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>5 3
4 5 1 3 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出样例</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1 2 3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>提示</strong>：先把数组建成堆，然后把堆顶元素输出出来。</p></div>`,15),j=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<iostream>")]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<algorithm>")]),s(`

`),n("span",{class:"token keyword"},"using"),s(),n("span",{class:"token keyword"},"namespace"),s(" std"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"int"),s(" N "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"100010"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"int"),s(" n"),n("span",{class:"token punctuation"},","),s("m"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"int"),s(" h"),n("span",{class:"token punctuation"},"["),s("N"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s("size2"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"down"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" u"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" t "),n("span",{class:"token operator"},"="),s(" u"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("u "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"<="),s(" size2 "),n("span",{class:"token operator"},"&&"),s(" h"),n("span",{class:"token punctuation"},"["),s("u "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"<"),s(" h"),n("span",{class:"token punctuation"},"["),s("t"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(" t "),n("span",{class:"token operator"},"="),s(" u "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("u "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token operator"},"+"),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"<="),s("size2 "),n("span",{class:"token operator"},"&&"),s(" h"),n("span",{class:"token punctuation"},"["),s("u "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"<"),s(" h"),n("span",{class:"token punctuation"},"["),s("t"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s("t "),n("span",{class:"token operator"},"="),s(" u "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("u "),n("span",{class:"token operator"},"!="),s(" t"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token function"},"swap"),n("span",{class:"token punctuation"},"("),s("h"),n("span",{class:"token punctuation"},"["),s("u"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s("h"),n("span",{class:"token punctuation"},"["),s("t"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token function"},"down"),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token function"},"scanf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d%d"'),n("span",{class:"token punctuation"},","),n("span",{class:"token operator"},"&"),s("n"),n("span",{class:"token punctuation"},","),n("span",{class:"token operator"},"&"),s("m"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"for"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s("i "),n("span",{class:"token operator"},"<="),s(" n "),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token function"},"scanf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d"'),n("span",{class:"token punctuation"},","),n("span",{class:"token operator"},"&"),s("h"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    
    size2 `),n("span",{class:"token operator"},"="),s(" n"),n("span",{class:"token punctuation"},";"),s(`
    
    
    `),n("span",{class:"token keyword"},"for"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(" n"),n("span",{class:"token operator"},"/"),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"--"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token function"},"down"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    
    `),n("span",{class:"token comment"},"// 输出栈顶元素，输出完以后将栈顶元素删除"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("m "),n("span",{class:"token operator"},"--"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d "'),n("span",{class:"token punctuation"},","),s("h"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`    
        h`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" h"),n("span",{class:"token punctuation"},"["),s("size2"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
        size2 `),n("span",{class:"token operator"},"--"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token function"},"down"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),I=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("java"),n("span",{class:"token punctuation"},"."),s("util"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"Scanner")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Main"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token class-name"},"N"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"100010"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" h "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token class-name"},"N"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"int"),s(" size"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"//交换函数"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"swap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" x"),n("span",{class:"token punctuation"},","),n("span",{class:"token keyword"},"int"),s(" y"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" temp "),n("span",{class:"token operator"},"="),s(" h"),n("span",{class:"token punctuation"},"["),s("x"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
        h`),n("span",{class:"token punctuation"},"["),s("x"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" h"),n("span",{class:"token punctuation"},"["),s("y"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
        h`),n("span",{class:"token punctuation"},"["),s("y"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" temp"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token comment"},"//堆函数核心函数，堆排序函数,传入的参数u是下标"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"down"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" u"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" t "),n("span",{class:"token operator"},"="),s(" u"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// t用来分身变量"),s(`
        `),n("span",{class:"token comment"},"//u的左分支下标小于size说明该数存在,然后如果这个数小于t，则让左下标赋值给t,即u的分身 "),s(`
        `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("u "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"<="),s(" size "),n("span",{class:"token operator"},"&&"),s(" h"),n("span",{class:"token punctuation"},"["),s("u "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"<"),s(" h"),n("span",{class:"token punctuation"},"["),s("t"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(" t "),n("span",{class:"token operator"},"="),s(" u "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},";"),s(` 
        `),n("span",{class:"token comment"},"//u的右分支下标小于size说明该数存在，然后如果这个数小于t，因为可能上面的if语句会重置t，则判断是不是小于新或旧t,"),s(`
        `),n("span",{class:"token comment"},"//如果小于t的话，就让右下标赋值给t ,即u的分身。"),s(`
        `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("u "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"<="),s(" size "),n("span",{class:"token operator"},"&&"),s(" h"),n("span",{class:"token punctuation"},"["),s("u "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"<"),s(" h"),n("span",{class:"token punctuation"},"["),s("t"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(" t "),n("span",{class:"token operator"},"="),s(" u "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"//如果u不等于t,说明左或者右下标有比较小的值赋值给t了，分身变了"),s(`
        `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("u "),n("span",{class:"token operator"},"!="),s(" t"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token comment"},"//就让u跟t这两个数交换一下位置，让小的数替代u的位置"),s(`
            `),n("span",{class:"token function"},"swap"),n("span",{class:"token punctuation"},"("),s("u"),n("span",{class:"token punctuation"},","),s("t"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token comment"},"//然后继续递归t下标小的位置"),s(`
            `),n("span",{class:"token function"},"down"),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" args"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"Scanner"),s(" scan "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Scanner"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("in"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" n "),n("span",{class:"token operator"},"="),s(" scan"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"nextInt"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" m "),n("span",{class:"token operator"},"="),s(" scan"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"nextInt"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"for"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<="),s(" n "),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"++"),s(),n("span",{class:"token punctuation"},")"),s(" h"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" scan"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"nextInt"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"//首先将所有数先存入数组中"),s(`
        size `),n("span",{class:"token operator"},"="),s(" n"),n("span",{class:"token punctuation"},";"),n("span",{class:"token comment"},"//长度为n"),s(`
        `),n("span",{class:"token comment"},"//从n/2的位置开始将数组中的值插入堆中"),s(`
        `),n("span",{class:"token comment"},"//堆结构是一个完全二叉树，所有有分支的数等于没有分支的数，即最后一排的数量等于上面所有的数"),s(`
        `),n("span",{class:"token comment"},"//最下面一排没有分支的数不用参与插入，所以从n/2开始进行插入"),s(`
        `),n("span",{class:"token keyword"},"for"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(" n"),n("span",{class:"token operator"},"/"),n("span",{class:"token number"},"2"),s(),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},">="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token operator"},"--"),s("i "),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token function"},"down"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),n("span",{class:"token comment"},"//就是让他进行向下排序处理 "),s(`

        `),n("span",{class:"token keyword"},"while"),n("span",{class:"token punctuation"},"("),s("m "),n("span",{class:"token operator"},"--"),s(),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token comment"},"//输出前m小的m个元素"),s(`
            `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),s("h"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token string"},'" "'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"//每一次输出头节点"),s(`
            `),n("span",{class:"token comment"},"//因为是数组，删除第一个数复杂，删除最后一个元素比较简单"),s(`
            `),n("span",{class:"token comment"},"//所以就将最后一个元素将第一个元素覆盖掉，然后删除掉最后一个元素"),s(`
            h`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" h"),n("span",{class:"token punctuation"},"["),s("size"),n("span",{class:"token operator"},"--"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token comment"},"//然后进行堆排序，对第一个元素进行处理"),s(`
            `),n("span",{class:"token function"},"down"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1);function A(C,Q){const e=i("router-link"),l=i("Tabs");return r(),d("div",null,[n("nav",b,[n("ul",null,[n("li",null,[t(e,{to:"#trie树"},{default:a(()=>[s("Trie树")]),_:1})]),n("li",null,[t(e,{to:"#并查集"},{default:a(()=>[s("并查集")]),_:1}),n("ul",null,[n("li",null,[t(e,{to:"#应用场景"},{default:a(()=>[s("应用场景")]),_:1})]),n("li",null,[t(e,{to:"#基本思想"},{default:a(()=>[s("基本思想")]),_:1})]),n("li",null,[t(e,{to:"#代码示例"},{default:a(()=>[s("代码示例")]),_:1})])])]),n("li",null,[t(e,{to:"#堆"},{default:a(()=>[s("堆")]),_:1}),n("ul",null,[n("li",null,[t(e,{to:"#如何手写一个堆"},{default:a(()=>[s("如何手写一个堆？")]),_:1})]),n("li",null,[t(e,{to:"#基本结构"},{default:a(()=>[s("基本结构")]),_:1})]),n("li",null,[t(e,{to:"#代码示例-1"},{default:a(()=>[s("代码示例")]),_:1})])])])])]),v,y,t(l,{id:"9",data:[{title:"c++"},{title:"java"}]},{tab0:a(({title:o,value:c,isActive:p})=>[w]),tab1:a(({title:o,value:c,isActive:p})=>[f]),_:1}),h,t(l,{id:"113",data:[{title:"c++"},{title:"java"}]},{tab0:a(({title:o,value:c,isActive:p})=>[g]),tab1:a(({title:o,value:c,isActive:p})=>[x]),_:1}),_,t(l,{id:"143",data:[{title:"c++"},{title:"java"}]},{tab0:a(({title:o,value:c,isActive:p})=>[S]),tab1:a(({title:o,value:c,isActive:p})=>[z]),_:1}),N,t(l,{id:"236",data:[{title:"c++"},{title:"java"}]},{tab0:a(({title:o,value:c,isActive:p})=>[j]),tab1:a(({title:o,value:c,isActive:p})=>[I]),_:1})])}const M=k(m,[["render",A],["__file","Tril树，并查集，堆.html.vue"]]);export{M as default};
