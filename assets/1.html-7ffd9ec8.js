const n=JSON.parse('{"key":"v-65892a1b","path":"/posts/Java/NIO/1.html","title":"java Socket 编程","lang":"zh-CN","frontmatter":{"title":"java Socket 编程","date":"2023-06-11T00:00:00.000Z","icon":"java","categroy":"java","description":"服务器通信原理 服务器通信原理 Java实现一个最简的HTTP服务器 package com.zyf.nio; import java.io.IOException; import java.io.PrintWriter; import java.net.ServerSocket; import java.net.Socket; public class HttpServer01 { public static void main(String[] args) throws IOException { ServerSocket serverSocket = new ServerSocket(8801); while (true) { try { Socket socket = serverSocket.accept(); // 阻塞 server(socket); } catch (Exception e) { e.printStackTrace(); } } } private static void server(Socket socket) throws IOException { try { PrintWriter printWriter = new PrintWriter(socket.getOutputStream(), true); // true表示自动刷新 printWriter.println(\\"HTTP/1.1 200 OK\\"); // 返回响应头 printWriter.println(\\"Content-Type:text/html;charset=utf-8\\"); // 返回响应头 String body = \\"hello,nio1\\"; // 返回响应体 printWriter.println(\\"Content-Length:\\" + body.getBytes().length); // 返回响应头 printWriter.println(); // 返回空行 printWriter.write(body); // 返回响应体 printWriter.close(); // 关闭流 socket.close(); } catch (IOException e) { e.printStackTrace(); } } }","head":[["meta",{"property":"og:url","content":"https://zhangyufeng19988.github.io/zyf/posts/Java/NIO/1.html"}],["meta",{"property":"og:title","content":"java Socket 编程"}],["meta",{"property":"og:description","content":"服务器通信原理 服务器通信原理 Java实现一个最简的HTTP服务器 package com.zyf.nio; import java.io.IOException; import java.io.PrintWriter; import java.net.ServerSocket; import java.net.Socket; public class HttpServer01 { public static void main(String[] args) throws IOException { ServerSocket serverSocket = new ServerSocket(8801); while (true) { try { Socket socket = serverSocket.accept(); // 阻塞 server(socket); } catch (Exception e) { e.printStackTrace(); } } } private static void server(Socket socket) throws IOException { try { PrintWriter printWriter = new PrintWriter(socket.getOutputStream(), true); // true表示自动刷新 printWriter.println(\\"HTTP/1.1 200 OK\\"); // 返回响应头 printWriter.println(\\"Content-Type:text/html;charset=utf-8\\"); // 返回响应头 String body = \\"hello,nio1\\"; // 返回响应体 printWriter.println(\\"Content-Length:\\" + body.getBytes().length); // 返回响应头 printWriter.println(); // 返回空行 printWriter.write(body); // 返回响应体 printWriter.close(); // 关闭流 socket.close(); } catch (IOException e) { e.printStackTrace(); } } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://zhangyufeng19988.github.io/zyf/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"java Socket 编程"}],["meta",{"property":"article:author","content":"ZYF"}],["meta",{"property":"article:published_time","content":"2023-06-11T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"java Socket 编程\\",\\"image\\":[\\"https://zhangyufeng19988.github.io/zyf/\\"],\\"datePublished\\":\\"2023-06-11T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ZYF\\",\\"url\\":\\"https://zhangyufeng19989.github.io\\",\\"email\\":\\"907392790@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"服务器通信原理","slug":"服务器通信原理","link":"#服务器通信原理","children":[{"level":3,"title":"Java实现一个最简的HTTP服务器","slug":"java实现一个最简的http服务器","link":"#java实现一个最简的http服务器","children":[]}]},{"level":2,"title":"IO模型","slug":"io模型","link":"#io模型","children":[{"level":3,"title":"五种IO模型","slug":"五种io模型","link":"#五种io模型","children":[]}]},{"level":2,"title":"Netty 框架","slug":"netty-框架","link":"#netty-框架","children":[{"level":3,"title":"Netty概览","slug":"netty概览","link":"#netty概览","children":[]},{"level":3,"title":"Netty特性","slug":"netty特性","link":"#netty特性","children":[]},{"level":3,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":3,"title":"Event & Handler","slug":"event-handler-1","link":"#event-handler-1","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":5.4,"words":1621},"filePathRelative":"posts/Java/NIO/1.md","localizedDate":"2023年6月11日","excerpt":"<h2> 服务器通信原理</h2>\\n<figure><figcaption>服务器通信原理</figcaption></figure>\\n<h3> Java实现一个最简的HTTP服务器</h3>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">package</span> <span class=\\"token namespace\\">com<span class=\\"token punctuation\\">.</span>zyf<span class=\\"token punctuation\\">.</span>nio</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>io<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">IOException</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>io<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">PrintWriter</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>net<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">ServerSocket</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>net<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Socket</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">HttpServer01</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">IOException</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">ServerSocket</span> serverSocket <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ServerSocket</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">8801</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token class-name\\">Socket</span> socket <span class=\\"token operator\\">=</span> serverSocket<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">accept</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 阻塞</span>\\n                <span class=\\"token function\\">server</span><span class=\\"token punctuation\\">(</span>socket<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Exception</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printStackTrace</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">server</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Socket</span> socket<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">IOException</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">PrintWriter</span> printWriter <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">PrintWriter</span><span class=\\"token punctuation\\">(</span>socket<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getOutputStream</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// true表示自动刷新</span>\\n            printWriter<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"HTTP/1.1 200 OK\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 返回响应头</span>\\n            printWriter<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Content-Type:text/html;charset=utf-8\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 返回响应头</span>\\n            <span class=\\"token class-name\\">String</span> body <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"hello,nio1\\"</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 返回响应体</span>\\n            printWriter<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Content-Length:\\"</span> <span class=\\"token operator\\">+</span> body<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBytes</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 返回响应头</span>\\n            printWriter<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 返回空行</span>\\n            printWriter<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">write</span><span class=\\"token punctuation\\">(</span>body<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 返回响应体</span>\\n            printWriter<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 关闭流</span>\\n            socket<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">IOException</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printStackTrace</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
